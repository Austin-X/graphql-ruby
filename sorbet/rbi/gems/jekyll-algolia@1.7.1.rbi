# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `jekyll-algolia` gem.
# Please instead update this file by running `bin/tapioca gem jekyll-algolia`.

# source://jekyll-algolia//lib/jekyll/commands/algolia.rb#3
module Jekyll
  class << self
    # source://jekyll/4.3.2/lib/jekyll.rb#114
    def configuration(override = T.unsafe(nil)); end

    # source://jekyll/4.3.2/lib/jekyll.rb#101
    def env; end

    # source://jekyll/4.3.2/lib/jekyll.rb#145
    def logger; end

    # source://jekyll/4.3.2/lib/jekyll.rb#156
    def logger=(writer); end

    # source://jekyll/4.3.2/lib/jekyll.rb#174
    def sanitized_path(base_directory, questionable_path); end

    # source://jekyll/4.3.2/lib/jekyll.rb#133
    def set_timezone(timezone); end

    # source://jekyll/4.3.2/lib/jekyll.rb#163
    def sites; end
  end
end

# Requirable file, loading all dependencies.
# Methods here are called by the main `jekyll algolia` command
#
# source://jekyll-algolia//lib/jekyll-algolia.rb#9
module Jekyll::Algolia
  class << self
    # Public: Init the Algolia module
    #
    # config - A hash of Jekyll config option (merge of _config.yml options and
    # options passed on the command line)
    #
    # The gist of the plugin works by instanciating a Jekyll site,
    # monkey-patching its `write` method and building it.
    #
    # source://jekyll-algolia//lib/jekyll-algolia.rb#31
    def init(config = T.unsafe(nil)); end

    # Public: Monkey patch Jekyll and external plugins so they don't interfere
    # with our plugin
    #
    # Note: This is only loaded when running `jekyll algolia` so should not have
    # any impact on regular builds
    #
    # source://jekyll-algolia//lib/jekyll-algolia.rb#61
    def load_overwrites; end

    # Public: Run the main Algolia module
    #
    # Actually "process" the site, which will acts just like a regular `jekyll
    # build` except that our monkey patched `write` method will be called
    # instead.
    #
    # Note: The internal list of files to be processed will only be created when
    # calling .process
    #
    # source://jekyll-algolia//lib/jekyll-algolia.rb#80
    def run; end

    # Public: Get access to the Jekyll site
    #
    # Tests will need access to the inner Jekyll website so we expose it here
    #
    # source://jekyll-algolia//lib/jekyll-algolia.rb#88
    def site; end
  end
end

# Single source of truth for access to configuration variables
#
# source://jekyll-algolia//lib/jekyll/algolia/configurator.rb#6
module Jekyll::Algolia::Configurator
  include ::Jekyll::Algolia

  class << self
    # Public: Get the value of a specific Algolia configuration option, or
    # revert to the default value otherwise
    #
    # key - Algolia key to read
    #
    # Returns the value of this option, or the default value
    #
    # source://jekyll-algolia//lib/jekyll/algolia/configurator.rb#104
    def algolia(key); end

    # Public: Return the api key
    #
    # Will first try to read the ENV variable. Will otherwise try to read the
    # _algolia_api_key file in the Jekyll folder
    #
    # source://jekyll-algolia//lib/jekyll/algolia/configurator.rb#128
    def api_key; end

    # Public: Return the application id
    #
    # Will first try to read the ENV variable, and fallback to the one
    # configured in Jekyll config
    #
    # source://jekyll-algolia//lib/jekyll/algolia/configurator.rb#120
    def application_id; end

    # Public: Check that all credentials are set
    #
    # Returns true if everything is ok, false otherwise. Will display helpful
    # error messages for each missing credential
    #
    # source://jekyll-algolia//lib/jekyll/algolia/configurator.rb#172
    def assert_valid_credentials; end

    # Public: Access to the global configuration object
    #
    # This is a method around @config so we can mock it in the tests
    #
    # source://jekyll-algolia//lib/jekyll/algolia/configurator.rb#85
    def config; end

    # Public: Setting a default values to index only html and markdown files
    #
    # Markdown files can have many different extensions. We keep the one
    # defined in the Jekyll config
    #
    # source://jekyll-algolia//lib/jekyll/algolia/configurator.rb#188
    def default_extensions_to_index; end

    # Public: Setting a default value to ignore index.html/index.md files in
    # the root
    #
    # Chances are high that the main page is not worthy of indexing (it can be
    # the list of the most recent posts or some landing page without much
    # content). We ignore it by default.
    #
    # User can still add it by manually specifying a `files_to_exclude` to an
    # empty array
    #
    # source://jekyll-algolia//lib/jekyll/algolia/configurator.rb#202
    def default_files_to_exclude; end

    # Public: Disable features from other Jekyll plugins that might interfere
    # with the indexing
    # Note that if other jekyll plugins are defined as part of the
    # :jekyll_plugins group in the Gemfile, we might be able to override them
    # using .load_overwrites in jekyll-algolia.rb.
    # If they are simply required in Gemfile, then we might need to revert
    # their values to nil values from here
    #
    # source://jekyll-algolia//lib/jekyll/algolia/configurator.rb#258
    def disable_other_plugins(config); end

    # Public: Returns true if the command is run in verbose mode
    #
    # When set to true, no indexing operations will be sent to the API
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/configurator.rb#221
    def dry_run?; end

    # Public: Returns a list of extensions to index
    #
    # Will use default values or read the algolia.extensions_to_index key.
    # Accepts both an array or a comma-separated list
    #
    # source://jekyll-algolia//lib/jekyll/algolia/configurator.rb#243
    def extensions_to_index; end

    # Public: Returns true if the command should always update the settings
    #
    # When set to true, the index settings will always be updated, no matter
    # if they've been modified or not
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/configurator.rb#232
    def force_settings?; end

    # Public: Get the value of a specific Jekyll configuration option
    #
    # key - Key to read
    #
    # Returns the value of this configuration option, nil otherwise
    #
    # source://jekyll-algolia//lib/jekyll/algolia/configurator.rb#94
    def get(key); end

    # Public: Return the index name
    #
    # Will first try to read the ENV variable, and fallback to the one
    # configured in Jekyll config
    #
    # source://jekyll-algolia//lib/jekyll/algolia/configurator.rb#148
    def index_name; end

    # Public: Return the name of the index used to store the object ids
    #
    # source://jekyll-algolia//lib/jekyll/algolia/configurator.rb#153
    def index_object_ids_name; end

    # Public: Init the configurator with the Jekyll config
    #
    # config - The config passed by the `jekyll algolia` command. Default to
    # the default Jekyll config
    #
    # source://jekyll-algolia//lib/jekyll/algolia/configurator.rb#70
    def init(config = T.unsafe(nil)); end

    # Public: Get the index settings
    #
    # This will be a merge of default settings and the one defined in the
    # _config.yml file
    #
    # source://jekyll-algolia//lib/jekyll/algolia/configurator.rb#161
    def settings; end

    # Public: Returns true if the command is run in verbose mode
    #
    # When set to true, more logs will be displayed
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/configurator.rb#211
    def verbose?; end

    # Public: Check for any deprecated config option and warn the user
    #
    # source://jekyll-algolia//lib/jekyll/algolia/configurator.rb#281
    def warn_of_deprecated_options; end
  end
end

# Algolia default values
#
# source://jekyll-algolia//lib/jekyll/algolia/configurator.rb#12
Jekyll::Algolia::Configurator::ALGOLIA_DEFAULTS = T.let(T.unsafe(nil), Hash)

# Catch API errors and display messages
#
# source://jekyll-algolia//lib/jekyll/algolia/error_handler.rb#10
module Jekyll::Algolia::ErrorHandler
  include ::Jekyll::Algolia

  class << self
    # Public: Parses an Algolia error message into a hash of its content
    #
    # message - The raw message as returned by the API
    #
    # Returns a hash of all parts of the message, to be more easily consumed
    # by our error matchers
    #
    # source://jekyll-algolia//lib/jekyll/algolia/error_handler.rb#75
    def error_hash(message); end

    # Public: Will identify the error and return its internal name
    #
    # error - The caught error
    # context - A hash of additional information that can be passed from the
    # code intercepting the user
    #
    # It will parse in order all potential known issues until it finds one
    # that matches. Returns false if no match, or a hash of :name and :details
    # further identifying the issue.
    #
    # source://jekyll-algolia//lib/jekyll/algolia/error_handler.rb#46
    def identify(error, context = T.unsafe(nil)); end

    # Public: Check if the credentials are working
    #
    # _context - Not used
    #
    # Application ID and API key submitted don't match any credentials known
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/error_handler.rb#164
    def invalid_credentials?(error, _context = T.unsafe(nil)); end

    # Public: Check if the index name is invalid
    #
    # Some characters are forbidden in index names
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/error_handler.rb#232
    def invalid_index_name?(error, _context = T.unsafe(nil)); end

    # Public: Check if the sent records are not too big
    #
    # context[:records] - list of records sent in the batch
    #
    # One of the sent record is too big and has been rejected by the API. This
    # should not happen as we proactively check for record size before pushing
    # them. If it still happens it means that the value set in max_record_size
    # is not matching the value in the plan.
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/error_handler.rb#187
    def record_too_big_api?(error, _context = T.unsafe(nil)); end

    # Public: Stop the execution of the plugin and display if possible
    # a human-readable error message
    #
    # error - The caught error
    # context - A hash of values that will be passed from where the error
    # happened to the display
    #
    # source://jekyll-algolia//lib/jekyll/algolia/error_handler.rb#19
    def stop(error, context = T.unsafe(nil)); end

    # Public: Check if the application has too many records
    #
    # We're trying to push too many records and it goes over quota
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/error_handler.rb#247
    def too_many_records?(error, _context = T.unsafe(nil)); end

    # Public: Check if the application id is available
    #
    # _context - Not used
    #
    # If the call to the cluster fails, chances are that the application ID
    # is invalid. As we cannot actually contact the server, the error is raw
    # and does not follow our error spec
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/error_handler.rb#146
    def unknown_application_id?(error, _context = T.unsafe(nil)); end

    # Public: Check if one of the index settings is invalid
    #
    # context[:settings] - The settings passed to update the index
    #
    # The API will block any call that tries to update a setting value that is
    # not available. We'll tell the user which one so they can fix their
    # issue.
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/error_handler.rb#211
    def unknown_setting?(error, context = T.unsafe(nil)); end
  end
end

# Module to extract records from Jekyll files
#
# source://jekyll-algolia//lib/jekyll/algolia/extractor.rb#8
module Jekyll::Algolia::Extractor
  include ::Jekyll::Algolia

  class << self
    # Public: Adds a unique :objectID field to the hash, representing the
    # current content of the record
    #
    # source://jekyll-algolia//lib/jekyll/algolia/extractor.rb#47
    def add_unique_object_id(record); end

    # Public: Extract raw records from the file, including content for each
    # node and its headings
    #
    # content - The HTML content to parse
    #
    # source://jekyll-algolia//lib/jekyll/algolia/extractor.rb#56
    def extract_raw_records(content); end

    # Public: Extract records from the file
    #
    # file - The Jekyll file to process
    #
    # source://jekyll-algolia//lib/jekyll/algolia/extractor.rb#14
    def run(file); end
  end
end

# Module to get information about Jekyll file. Jekyll handles posts, pages,
# collection, etc. They each need specific processing, so knowing which kind
# of file we're working on will help.
#
# We also do not index all files. This module will help in defining which
# files should be indexed and which should not.
#
# source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#15
module Jekyll::Algolia::FileBrowser
  include ::Jekyll::Algolia

  class << self
    # Public: Return the absolute path of a Jekyll file
    #
    # file - The Jekyll file to inspect
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#21
    def absolute_path(filepath); end

    # Public: Check if the file has one of the allowed extensions
    #
    # file - The Jekyll file
    #
    # Jekyll can transform markdown files to HTML by default. With plugins, it
    # can convert many more file formats. By default we'll only index markdown
    # and raw HTML files but this list can be extended using the
    # `extensions_to_index` config option.
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#110
    def allowed_extension?(file); end

    # Public: Returns the list of tags of a file, defaults to an empty array
    #
    # file - The Jekyll file
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#230
    def categories(file); end

    # Public: Returns the name of the collection
    #
    # file - The Jekyll file
    #
    # Only collection documents can have a collection name. Pages don't. Posts
    # are purposefully excluded from it as well even if they are technically
    # part of a collection
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#349
    def collection(file); end

    # Public: Returns a timestamp of the file date
    #
    # file - The Jekyll file
    #
    # Posts have their date coming from the filepath, or the front-matter.
    # Pages and other collection items can only have a date set in
    # front-matter.
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#241
    def date(file); end

    # Public: Returns the HTML version of the excerpt
    #
    # file - The Jekyll file
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#305
    def excerpt_html(file); end

    # Public: Returns the raw excerpt of a file, directly as returned by
    # Jekyll. Swallow any error that could occur when reading.
    #
    # file - The Jekyll file
    #
    # This might throw an exception if the excerpt is invalid. We also
    # silence all logger output as Jekyll is quite verbose and will display
    # the potential Liquid error in the terminal, even if we catch the actual
    # error.
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#274
    def excerpt_raw(file); end

    # Public: Returns the text version of the excerpt
    #
    # file - The Jekyll file
    #
    # Only collections (including posts) have an excerpt. Pages don't.
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#323
    def excerpt_text(file); end

    # Public: Check if the file has been excluded by `files_to_exclude`
    #
    # file - The Jekyll file
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#119
    def excluded_from_config?(file); end

    # Public: Check if the file has been excluded by running a custom user
    # hook
    #
    # file - The Jekyll file
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#135
    def excluded_from_hook?(file); end

    # Public: Check if the file should be indexed
    #
    # file - The Jekyll file
    #
    # There are many reasons a file should not be indexed. We need to exclude
    # all the static assets, only keep the actual content.
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#51
    def indexable?(file); end

    # Public: Check if the file is a 404 error page
    #
    # file - The Jekyll file
    #
    # 404 pages are not Jekyll defaults but a convention adopted by GitHub
    # pages. We don't want to index those.
    # Source: https://help.github.com/articles/creating-a-custom-404-page-for-your-github-pages-site/
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#79
    def is_404?(file); end

    # Public: Return a hash of all the file metadata
    #
    # file - The Jekyll file
    #
    # It contains both the raw metadata extracted from the front-matter, as
    # well as more specific fields like the collection name, date timestamp,
    # slug, type and url
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#146
    def metadata(file); end

    # Note that even if you define tags and categories in a collection item,
    # it will not be included in the data. It's always an empty array.
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#175
    def raw_data(file); end

    # Public: Check if the file is redirect page
    #
    # file - The Jekyll file
    #
    # Plugins like jekyll-redirect-from add dynamic pages that only contain
    # an HTML meta refresh. We need to exclude those files from indexing.
    # https://github.com/jekyll/jekyll-redirect-from
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#90
    def redirect?(file); end

    # Public: Return the path of a Jekyll file relative to the Jekyll source
    #
    # file - The Jekyll file to inspect
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#31
    def relative_path(filepath); end

    # Public: Returns the slug of the file
    #
    # file - The Jekyll file
    #
    # Slugs can be automatically extracted from collections, but for other
    # files, we have to create them from the basename
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#334
    def slug(file); end

    # Public: Check if the specified file is a static Jekyll asset
    #
    # file - The Jekyll file
    #
    # We don't index static assets (js, css, images)
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#67
    def static_file?(file); end

    # Public: Returns the list of tags of a file, defaults to an empty array
    #
    # file - The Jekyll file
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#223
    def tags(file); end

    # Public: Get the type of the document (page, post, collection, etc)
    #
    # file - The Jekyll file
    #
    # Pages are simple html and markdown documents in the tree
    # Elements from a collection are called Documents
    # Posts are a custom kind of Documents
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#205
    def type(file); end

    # Public: Returns the url of the file, starting from the root
    #
    # file - The Jekyll file
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#216
    def url(file); end

    # Public: Return true if the Jekyll default excerpt should be used for
    # this file
    #
    # file - The Jekyll file
    #
    # Most of the time, we'll use our own excerpt (the first matching
    # element), but in some cases, we'll fallback to Jekyll's default excerpt
    # if it seems to be what the user wants
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/file_browser.rb#290
    def use_default_excerpt?(file); end
  end
end

# Applying user-defined hooks on the processing pipeline
#
# source://jekyll-algolia//lib/jekyll/algolia/hooks.rb#6
module Jekyll::Algolia::Hooks
  class << self
    # Public: Apply the before_indexing_all hook to all records.
    # This method is a simple wrapper around methods that can be overwritten
    # by users. Using a wrapper around it makes testing their behavior easier
    # as they can be mocked in tests.
    #
    # records - The list of all records to be indexed
    #
    # source://jekyll-algolia//lib/jekyll/algolia/hooks.rb#31
    def apply_all(records, context); end

    # Public: Apply the before_indexing_each hook to the record.
    # This method is a simple wrapper around methods that can be overwritten
    # by users. Using a wrapper around it makes testing their behavior easier
    # as they can be mocked in tests.
    #
    # record - The hash of the record to be pushed
    # node - The Nokogiri node of the element
    #
    # source://jekyll-algolia//lib/jekyll/algolia/hooks.rb#14
    def apply_each(record, node, context); end

    # Public: Custom method to be run on the list of all records before
    # indexing them
    #
    # records - The list of all records to be indexed
    #
    # Users can modify the full list from here. It might provide an easier
    # interface than `hook_before_indexing_each` when knowing the full context
    # is necessary
    #
    # source://jekyll-algolia//lib/jekyll/algolia/hooks.rb#74
    def before_indexing_all(records, _context); end

    # Public: Custom method to be run on the record before indexing it
    #
    # record - The hash of the record to be pushed
    # node - The Nokogiri node of the element
    #
    # Users can modify the record (adding/editing/removing keys) here. It can
    # be used to remove keys that should not be indexed, or access more
    # information from the HTML node.
    #
    # Users can return nil to signal that the record should not be indexed
    #
    # source://jekyll-algolia//lib/jekyll/algolia/hooks.rb#62
    def before_indexing_each(record, _node, _context); end

    # Public: Check if the file should be indexed or not
    #
    # filepath - The path to the file, before transformation
    #
    # This hook allow users to define if a specific file should be indexed or
    # not. Basic exclusion can be done through the `files_to_exclude` option,
    # but a custom hook like this one can allow more fine-grained
    # customisation.
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/hooks.rb#48
    def should_be_excluded?(_filepath); end
  end
end

# Module to push records to Algolia and configure the index
#
# source://jekyll-algolia//lib/jekyll/algolia/indexer.rb#11
module Jekyll::Algolia::Indexer
  include ::Jekyll::Algolia

  class << self
    # Public: Execute a serie of operations in a batch
    #
    # operations - Operations to batch
    #
    # Note: Will split the batch in several calls if too big, and will display
    # a progress bar if this happens
    #
    # source://jekyll-algolia//lib/jekyll/algolia/indexer.rb#240
    def execute_operations(operations); end

    # Public: Returns the Algolia index object
    #
    # source://jekyll-algolia//lib/jekyll/algolia/indexer.rb#31
    def index; end

    # Public: Check if an index exists
    #
    # index - Index to check
    #
    # Note: there is no API endpoint to do that, so we try to get the settings
    # instead, which will fail if the index does not exist
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/indexer.rb#46
    def index_exist?(index); end

    # Public: Returns the Algolia index used to store object ids
    #
    # source://jekyll-algolia//lib/jekyll/algolia/indexer.rb#36
    def index_object_ids; end

    # Public: Init the module
    #
    # source://jekyll-algolia//lib/jekyll/algolia/indexer.rb#15
    def init; end

    # Public: Returns an array of the local objectIDs
    #
    # records - Array of all local records
    #
    # source://jekyll-algolia//lib/jekyll/algolia/indexer.rb#160
    def local_object_ids(records); end

    # Public: Get a unique settingID for the current settings
    #
    # The settingID is generated as a hash of the current settings. As it will
    # be stored in the userData key of the resulting config, we exclude that
    # key from the hashing.
    #
    # source://jekyll-algolia//lib/jekyll/algolia/indexer.rb#272
    def local_setting_id; end

    # Public: Get the number of records in an index
    #
    # index - Index to check
    #
    # Note: We'll do an empty query search, to match everything, but we'll
    # only return the objectID and one element, to get the shortest response
    # possible. It will still contain the nbHits
    #
    # source://jekyll-algolia//lib/jekyll/algolia/indexer.rb#60
    def record_count(index); end

    # Public: Returns an array of all the objectIDs in the index
    #
    # Note: We use a dedicated index to store the objectIDs for faster
    # browsing, but if the index does not exist we read the main index.
    #
    # source://jekyll-algolia//lib/jekyll/algolia/indexer.rb#142
    def remote_object_ids; end

    # Public: Get an array of all the object ids, stored in a dedicated
    # index
    #
    # Note: This will be very fast. Each record contain 100 object id, so it
    # will fit in one call each time.
    #
    # source://jekyll-algolia//lib/jekyll/algolia/indexer.rb#122
    def remote_object_ids_from_dedicated_index; end

    # Public: Get an array of all object IDs stored in the main index
    #
    # Note: As this will be slow (grabbing them 1000 at a time), we display
    # a progress bar.
    #
    # source://jekyll-algolia//lib/jekyll/algolia/indexer.rb#92
    def remote_object_ids_from_main_index; end

    # Public: Get the settings of the remote index
    #
    # In case the index is not accessible, it will return nil
    #
    # source://jekyll-algolia//lib/jekyll/algolia/indexer.rb#281
    def remote_settings; end

    # Public: Push all records to Algolia and configure the index
    #
    # records - Records to push
    #
    # source://jekyll-algolia//lib/jekyll/algolia/indexer.rb#374
    def run(records); end

    # Public: Set new settings to an index
    #
    # Will dispatch to the error handler if it fails
    #
    # source://jekyll-algolia//lib/jekyll/algolia/indexer.rb#341
    def set_settings(settings); end

    # Public: Set the User-Agent to send to the API
    #
    # Every integrations should follow the "YYY Integration" pattern, and
    # every API client should follow the "Algolia for YYY" pattern. Even if
    # each integration version is pinned to a specific API client version, we
    # are explicit in defining it to help debug from the dashboard.
    #
    # source://jekyll-algolia//lib/jekyll/algolia/indexer.rb#77
    def set_user_agent; end

    # Public: Update records of the index
    #
    # records - All records extracted from Jekyll
    #
    # Note: All operations will be done in one batch, assuring an atomic
    # update
    # Does nothing in dry run mode
    #
    # source://jekyll-algolia//lib/jekyll/algolia/indexer.rb#171
    def update_records(records); end

    # Public: Smart update of the settings of the index
    #
    # This will first compare the settings about to be pushed with the
    # settings already pushed. It will compare userData.settingID for that.
    # If the settingID is the same, we don't push as this won't change
    # anything. We will still check if the remote config seem to have been
    # manually altered though, and warn the user that this is not the
    # preferred way of doing so.
    #
    # If the settingID are not matching, it means our config is different, so
    # we push it, overriding the settingID for next push.
    #
    # source://jekyll-algolia//lib/jekyll/algolia/indexer.rb#298
    def update_settings; end

    # Public: Warn users that they have some settings manually configured in
    # their dashboard
    #
    # When users change some settings in their dashboard, those settings might
    # get overwritten by the plugin. We can't prevent that, but we can warn
    # them when we detect they changed something.
    #
    # source://jekyll-algolia//lib/jekyll/algolia/indexer.rb#354
    def warn_of_manual_dashboard_editing(changed_keys); end
  end
end

# Display helpful error messages
#
# source://jekyll-algolia//lib/jekyll/algolia/logger.rb#6
module Jekyll::Algolia::Logger
  class << self
    # Public: Displays a helpful error message for one of the knows errors
    #
    # message_id: A string identifying a know message
    # metadata: Hash of variables that can be used in the final text
    #
    # It will read files in ./errors/*.txt with the matching error and
    # display them using Jekyll internal logger.
    #
    # source://jekyll-algolia//lib/jekyll/algolia/logger.rb#73
    def known_message(message_id, metadata = T.unsafe(nil)); end

    # Public: Displays a log line
    #
    # line - Line to display. Expected to be of the following format:
    #   "X:Your content"
    # Where X is either I, W or E for marking respectively an info, warning or
    # error display
    #
    # source://jekyll-algolia//lib/jekyll/algolia/logger.rb#32
    def log(input); end

    # Public: Silence all Jekyll log output in this block
    # Usage:
    #   Logger.silence do
    #     # whatever Jekyll code here
    #   end
    #
    # This is especially useful when Jekyll is too talkative about what is
    # loggued. It works by redefining Jekyll.logger.write to a noop
    # temporarily and re-attributing the original method once finished.
    #
    # source://jekyll-algolia//lib/jekyll/algolia/logger.rb#16
    def silent; end

    # Public: Only display a log line if verbose mode is enabled
    #
    # line - The line to display, following the same format as .log
    #
    # source://jekyll-algolia//lib/jekyll/algolia/logger.rb#50
    def verbose(line); end

    # Public: Write the specified content to a file in the source directory
    #
    # filename - the file basename
    # content - the actual content of the file
    #
    # source://jekyll-algolia//lib/jekyll/algolia/logger.rb#60
    def write_to_file(filename, content); end
  end
end

# source://jekyll-algolia//lib/jekyll-algolia.rb#22
class Jekyll::Algolia::MissingCredentialsError < ::StandardError; end

# Module to push records to Algolia and configure the index
#
# source://jekyll-algolia//lib/jekyll/algolia/progress_bar.rb#9
module Jekyll::Algolia::ProgressBar
  include ::Jekyll::Algolia

  class << self
    # source://jekyll-algolia//lib/jekyll/algolia/progress_bar.rb#16
    def create(options); end

    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/progress_bar.rb#12
    def should_be_silenced?; end
  end
end

# Module to shrink a record so it fits in the plan quotas
#
# source://jekyll-algolia//lib/jekyll/algolia/shrinker.rb#7
module Jekyll::Algolia::Shrinker
  include ::Jekyll::Algolia

  class << self
    # Public: Attempt to reduce the size of the record by reducing the size of
    # the less needed attributes
    #
    # - raw_record: The record to attempt to reduce
    # - max_size: The max size to achieve in bytes
    #
    # The excerpts are the attributes most subject to being reduced. We'll go
    # as far as removing them if there is no other choice.
    #
    # source://jekyll-algolia//lib/jekyll/algolia/shrinker.rb#24
    def fit_to_size(raw_record, max_size); end

    # Public: Returns a string explaining which attributes are the largest in
    # the record
    #
    # record - The record hash to analyze
    #
    # source://jekyll-algolia//lib/jekyll/algolia/shrinker.rb#95
    def readable_largest_record_keys(record); end

    # Public: Get the byte size of the object once converted to JSON
    # - record: The record to estimate
    #
    # source://jekyll-algolia//lib/jekyll/algolia/shrinker.rb#12
    def size(record); end

    # Public: Stop the current process
    #
    # source://jekyll-algolia//lib/jekyll/algolia/shrinker.rb#107
    def stop_process; end

    # Public: Stop the current indexing process and display details about the
    # record that is too big to be pushed
    #
    # - record: The record causing the error
    #
    # This will display an error message and log the wrong record in a file in
    # the source directory
    #
    # source://jekyll-algolia//lib/jekyll/algolia/shrinker.rb#61
    def stop_with_error(record); end
  end
end

# Generic language-wide utils
#
# source://jekyll-algolia//lib/jekyll/algolia/utils.rb#8
module Jekyll::Algolia::Utils
  class << self
    # Public: Remove all keys with a nil value or an empty string from a hash
    #
    # hash - The input hash
    #
    # source://jekyll-algolia//lib/jekyll/algolia/utils.rb#53
    def compact_empty(hash); end

    # Public: Get a hash representing the difference between two hashes
    #
    # It only checks that all keys of alpha are also in beta, with the same
    # value. If not, it remember what was the value of beta and return it in
    # the output
    #
    # source://jekyll-algolia//lib/jekyll/algolia/utils.rb#139
    def diff_keys(alpha, beta); end

    # Public: Find an item from an array based on the value of one of its key
    #
    # items - The array of hashes to search
    # key - The key to search for
    # value - The value of the key to filter
    #
    # It is basically a wrapper around [].find, handling more edge-cases
    #
    # source://jekyll-algolia//lib/jekyll/algolia/utils.rb#87
    def find_by_key(items, key, value); end

    # Public: Convert an HTML string to its content only
    #
    # html - String representation of the HTML node
    #
    # source://jekyll-algolia//lib/jekyll/algolia/utils.rb#43
    def html_to_text(html); end

    # Public: Check if a variable is an instance of a specific class
    #
    # input - the variable to test
    # classname - the string representation of the class
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/utils.rb#33
    def instance_of?(input, classname); end

    # Public: Convert an object into an object that can easily be converted to
    # JSON, to be stored as a record
    #
    # item - The object to convert
    #
    # It will keep any string, number, boolean,boolean,array or nested object,
    # but will try to stringify other objects, excluding the one that contain
    # a unique identifier once serialized.
    #
    # source://jekyll-algolia//lib/jekyll/algolia/utils.rb#103
    def jsonify(item); end

    # Public: Convert a hash with string keys to a hash with symbol keys
    #
    # hash - The input hash, with string keys
    #
    # source://jekyll-algolia//lib/jekyll/algolia/utils.rb#25
    def keys_to_symbols(hash); end

    # Public: Check if a string matches a regex
    #
    # string - The string to test
    # regex - The regex to match against
    #
    # Newer versions of Ruby have easy ways to test this, but a wrapper is
    # needed for older versions.
    #
    # @return [Boolean]
    #
    # source://jekyll-algolia//lib/jekyll/algolia/utils.rb#71
    def match?(string, regex); end

    # Public: Allow redefining an instance method on the fly with a new one
    #
    # instance - The instance to overwrite
    # method - The method symbol to overwrite
    # block - The new block to use for replacing (as a proc)
    #
    # Solution found on
    # https://stackoverflow.com/questions/803020/redefining-a-single-ruby-method-on-a-single-instance-with-a-lambda/16631789
    #
    # source://jekyll-algolia//lib/jekyll/algolia/utils.rb#17
    def monkey_patch(instance, method, block); end

    # Public: Split a long text into lines of specific length
    #
    # It takes care to not cut words
    #
    # source://jekyll-algolia//lib/jekyll/algolia/utils.rb#153
    def split_lines(input, max_length); end
  end
end

# source://jekyll-algolia//lib/jekyll/algolia/version.rb#5
Jekyll::Algolia::VERSION = T.let(T.unsafe(nil), String)

# source://jekyll-algolia//lib/jekyll/commands/algolia.rb#4
module Jekyll::Commands; end

# Registering the `jekyll algolia` command
#
# source://jekyll-algolia//lib/jekyll/commands/algolia.rb#6
class Jekyll::Commands::Algolia < ::Jekyll::Command
  class << self
    # source://jekyll-algolia//lib/jekyll/commands/algolia.rb#8
    def init_with_program(prog); end
  end
end

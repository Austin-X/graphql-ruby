# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `algoliasearch` gem.
# Please instead update this file by running `bin/tapioca gem algoliasearch`.

# source://algoliasearch//lib/algolia/protocol.rb#3
module Algolia
  class << self
    # Create a new user key
    #
    #  Deprecated call was add_api_key(acl, validity, max_queries_per_IP_per_hour, max_hits_per_query, indexes)
    #
    #  ACL can contain an array with those strings:
    #    - search: allow to search (https and http)
    #    - addObject: allows to add/update an object in the index (https only)
    #    - deleteObject : allows to delete an existing object (https only)
    #    - deleteIndex : allows to delete index content (https only)
    #    - settings : allows to get index settings (https only)
    #    - editSettings : allows to change index settings (https only)
    #
    #  @param object can be two different parameters:
    #        The list of parameters for this key. Defined by a NSDictionary that
    #        can contains the following values:
    #          - acl: array of string
    #          - indexes: array of string
    #          - validity: int
    #          - referers: array of string
    #          - description: string
    #          - max_hits_per_query: integer
    #          - queryParameters: string
    #          - max_queries_per_IP_per_hour: integer
    #  @param request_options contains extra parameters to send with your query - Default = {}
    #
    # source://algoliasearch//lib/algolia/client.rb#1022
    def add_api_key(object, request_options = T.unsafe(nil), max_queries_per_IP_per_hour = T.unsafe(nil), max_hits_per_query = T.unsafe(nil), indexes = T.unsafe(nil)); end

    # Deprecated
    #
    # source://algoliasearch//lib/algolia/client.rb#1029
    def add_user_key(object, request_options = T.unsafe(nil), max_queries_per_IP_per_hour = T.unsafe(nil), max_hits_per_query = T.unsafe(nil), indexes = T.unsafe(nil)); end

    # Send a batch request targeting multiple indices
    #
    # source://algoliasearch//lib/algolia/client.rb#1094
    def batch(requests, request_options = T.unsafe(nil)); end

    # Send a batch request targeting multiple indices and wait the end of the indexing
    #
    # source://algoliasearch//lib/algolia/client.rb#1101
    def batch!(requests, request_options = T.unsafe(nil)); end

    # source://algoliasearch//lib/algolia/client.rb#1124
    def client; end

    # Copy an existing index.
    #
    # @param src_index the name of index to copy.
    # @param dst_index the new index name that will contains a copy of src_index_name (destination will be overriten if it already exist).
    # @param scope the optional list of scopes to copy (all if not specified).
    # @param request_options contains extra parameters to send with your query
    #
    # source://algoliasearch//lib/algolia/client.rb#856
    def copy_index(src_index, dst_index, scope = T.unsafe(nil), request_options = T.unsafe(nil)); end

    # Copy an existing index and wait until the copy has been processed.
    #
    # @param src_index the name of index to copy.
    # @param dst_index the new index name that will contains a copy of src_index_name (destination will be overriten if it already exist).
    # @param scope the optional list of scopes to copy (all if not specified).
    # @param request_options contains extra parameters to send with your query
    #
    # source://algoliasearch//lib/algolia/client.rb#868
    def copy_index!(src_index, dst_index, scope = T.unsafe(nil), request_options = T.unsafe(nil)); end

    # Copy an existing index rules.
    #
    # @param src_index the name of index to copy.
    # @param dst_index the new index name that will contains a copy of src_index_name rules (destination rules will be overriten if it already exist).
    # @param request_options contains extra parameters to send with your query
    #
    # source://algoliasearch//lib/algolia/client.rb#923
    def copy_rules(src_index, dst_index, request_options = T.unsafe(nil)); end

    # Copy an existing index rules and wait until the copy has been processed.
    #
    # @param src_index the name of index to copy.
    # @param dst_index the new index name that will contains a copy of src_index_name rules (destination rules will be overriten if it already exist).
    # @param request_options contains extra parameters to send with your query
    #
    # source://algoliasearch//lib/algolia/client.rb#934
    def copy_rules!(src_index, dst_index, request_options = T.unsafe(nil)); end

    # Copy an existing index settings.
    #
    # @param src_index the name of index to copy.
    # @param dst_index the new index name that will contains a copy of src_index_name settings (destination settings will be overriten if it already exist).
    # @param request_options contains extra parameters to send with your query
    #
    # source://algoliasearch//lib/algolia/client.rb#879
    def copy_settings(src_index, dst_index, request_options = T.unsafe(nil)); end

    # Copy an existing index settings and wait until the copy has been processed.
    #
    # @param src_index the name of index to copy.
    # @param dst_index the new index name that will contains a copy of src_index_name settings (destination settings will be overriten if it already exist).
    # @param request_options contains extra parameters to send with your query
    #
    # source://algoliasearch//lib/algolia/client.rb#890
    def copy_settings!(src_index, dst_index, request_options = T.unsafe(nil)); end

    # Copy an existing index synonyms.
    #
    # @param src_index the name of index to copy.
    # @param dst_index the new index name that will contains a copy of src_index_name synonyms (destination synonyms will be overriten if it already exist).
    # @param request_options contains extra parameters to send with your query
    #
    # source://algoliasearch//lib/algolia/client.rb#901
    def copy_synonyms(src_index, dst_index, request_options = T.unsafe(nil)); end

    # Copy an existing index synonyms and wait until the copy has been processed.
    #
    # @param src_index the name of index to copy.
    # @param dst_index the new index name that will contains a copy of src_index_name synonyms (destination synonyms will be overriten if it already exist).
    # @param request_options contains extra parameters to send with your query
    #
    # source://algoliasearch//lib/algolia/client.rb#912
    def copy_synonyms!(src_index, dst_index, request_options = T.unsafe(nil)); end

    # Delete an existing user key
    #
    # source://algoliasearch//lib/algolia/client.rb#1073
    def delete_api_key(key, request_options = T.unsafe(nil)); end

    # Delete an index
    #
    # source://algoliasearch//lib/algolia/client.rb#941
    def delete_index(name, request_options = T.unsafe(nil)); end

    # Delete an index and wait until the deletion has been processed.
    #
    # source://algoliasearch//lib/algolia/client.rb#948
    def delete_index!(name, request_options = T.unsafe(nil)); end

    # Deprecated
    #
    # source://algoliasearch//lib/algolia/client.rb#1087
    def delete_user_key(key, request_options = T.unsafe(nil)); end

    # Used mostly for testing. Lets you delete the api key global vars.
    #
    # source://algoliasearch//lib/algolia/client.rb#1118
    def destroy; end

    # Disable IP rate limit enabled with enableRateLimitForward() function
    #
    # source://algoliasearch//lib/algolia/client.rb#741
    def disable_rate_limit_forward; end

    # Allow to use IP rate limit when you have a proxy between end-user and Algolia.
    # This option will set the X-Forwarded-For HTTP header with the client IP and the
    # X-Forwarded-API-Key with the API Key having rate limits.
    #
    # @param admin_api_key the admin API Key you can find in your dashboard
    # @param end_user_ip the end user IP (you can use both IPV4 or IPV6 syntax)
    # @param rate_limit_api_key the API key on which you have a rate limit
    #
    # source://algoliasearch//lib/algolia/client.rb#734
    def enable_rate_limit_forward(admin_api_key, end_user_ip, rate_limit_api_key); end

    # Generate a secured and public API Key from a list of tagFilters and an
    # optional user token identifying the current user
    #
    # @param private_api_key your private API Key
    # @param tag_filters the list of tags applied to the query (used as security)
    # @param user_token an optional token identifying the current user
    #
    # source://algoliasearch//lib/algolia/client.rb#760
    def generate_secured_api_key(private_api_key, tag_filters_or_params, user_token = T.unsafe(nil)); end

    # Get ACL of a user key
    #
    # @param request_options contains extra parameters to send with your query
    #
    # source://algoliasearch//lib/algolia/client.rb#985
    def get_api_key(key, request_options = T.unsafe(nil)); end

    # Return last logs entries.
    #
    # @param offset Specify the first entry to retrieve (0-based, 0 is the most recent log entry).
    # @param length Specify the maximum number of entries to retrieve starting at offset. Maximum allowed value: 1000.
    # @param type Specify the type of entries you want to retrieve - default: "all"
    # @param request_options contains extra parameters to send with your query
    #
    # source://algoliasearch//lib/algolia/client.rb#960
    def get_logs(options = T.unsafe(nil), length = T.unsafe(nil), type = T.unsafe(nil)); end

    # Returns the remaining validity time for the given API key in seconds
    #
    # @param secured_api_key [String] the secured API key to check
    # @return [Integer] remaining validity in seconds
    #
    # source://algoliasearch//lib/algolia/client.rb#784
    def get_secured_api_key_remaining_validity(secured_api_key); end

    # source://algoliasearch//lib/algolia/client.rb#1112
    def get_task_status(index_name, taskID, request_options = T.unsafe(nil)); end

    # Deprecated
    #
    # source://algoliasearch//lib/algolia/client.rb#992
    def get_user_key(key, request_options = T.unsafe(nil)); end

    # Initialize the singleton instance of Client which is used by all API methods
    #
    # source://algoliasearch//lib/algolia/client.rb#708
    def init(options = T.unsafe(nil)); end

    # List all existing user keys with their associated ACLs
    #
    # @param request_options contains extra parameters to send with your query
    #
    # source://algoliasearch//lib/algolia/client.rb#969
    def list_api_keys(request_options = T.unsafe(nil)); end

    # List all existing indexes
    # return an Answer object with answer in the form
    #     {"items": [{ "name": "contacts", "createdAt": "2013-01-18T15:33:13.556Z"},
    #                {"name": "notes", "createdAt": "2013-01-18T15:33:13.556Z"}]}
    #
    # @param request_options contains extra parameters to send with your query
    #
    # source://algoliasearch//lib/algolia/client.rb#822
    def list_indexes(request_options = T.unsafe(nil)); end

    # Deprecated
    #
    # source://algoliasearch//lib/algolia/client.rb#976
    def list_user_keys(request_options = T.unsafe(nil)); end

    # Move an existing index.
    #
    # @param src_index the name of index to copy.
    # @param dst_index the new index name that will contains a copy of src_index_name (destination will be overriten if it already exist).
    # @param request_options contains extra parameters to send with your query
    #
    # source://algoliasearch//lib/algolia/client.rb#833
    def move_index(src_index, dst_index, request_options = T.unsafe(nil)); end

    # Move an existing index and wait until the move has been processed
    #
    # @param src_index the name of index to copy.
    # @param dst_index the new index name that will contains a copy of src_index_name (destination will be overriten if it already exist).
    # @param request_options contains extra parameters to send with your query
    #
    # source://algoliasearch//lib/algolia/client.rb#844
    def move_index!(src_index, dst_index, request_options = T.unsafe(nil)); end

    # This method allows to get objects (records) via objectID across
    # multiple indexes with one API call
    #
    # source://algoliasearch//lib/algolia/client.rb#810
    def multiple_get_objects(requests, request_options = T.unsafe(nil)); end

    # This method allows to query multiple indexes with one API call
    #
    # source://algoliasearch//lib/algolia/client.rb#802
    def multiple_queries(queries, options = T.unsafe(nil), strategy = T.unsafe(nil)); end

    # Restore an existing api key
    #
    # source://algoliasearch//lib/algolia/client.rb#1080
    def restore_api_key(key, request_options = T.unsafe(nil)); end

    # Allow to set custom headers
    #
    # source://algoliasearch//lib/algolia/client.rb#721
    def set_extra_header(key, value); end

    # Update a user key
    #
    #  Deprecated call was update_api_key(key, acl, validity, maxQueriesPerIPPerHour, max_hits_per_query, indexes)
    #
    #  ACL can contain an array with those strings:
    #    - search: allow to search (https and http)
    #    - addObject: allows to add/update an object in the index (https only)
    #    - deleteObject : allows to delete an existing object (https only)
    #    - deleteIndex : allows to delete index content (https only)
    #    - settings : allows to get index settings (https only)
    #    - editSettings : allows to change index settings (https only)
    #
    #  @param key API Key to update
    #  @param object The list of parameters for this key.
    #         Defined by a Hash that can contain the following values:
    #          - acl: array of string
    #          - indexes: array of string
    #          - validity: int
    #          - referers: array of string
    #          - description: string
    #          - max_hits_per_query: integer
    #          - queryParameters: string
    #          - max_queries_per_IP_per_hour: integer
    #  @param request_options contains extra parameters to send with your query - Default = {}
    #
    # source://algoliasearch//lib/algolia/client.rb#1059
    def update_api_key(key, object, request_options = T.unsafe(nil), max_queries_per_IP_per_hour = T.unsafe(nil), max_hits_per_query = T.unsafe(nil), indexes = T.unsafe(nil)); end

    # Deprecated
    #
    # source://algoliasearch//lib/algolia/client.rb#1066
    def update_user_key(key, object, request_options = T.unsafe(nil), max_queries_per_IP_per_hour = T.unsafe(nil), max_hits_per_query = T.unsafe(nil), indexes = T.unsafe(nil)); end

    # Wait until task is completed by the engine
    #
    # source://algoliasearch//lib/algolia/client.rb#1108
    def wait_task(index_name, taskID, time_before_retry = T.unsafe(nil), request_options = T.unsafe(nil)); end

    # Convenience method thats wraps enable_rate_limit_forward/disable_rate_limit_forward
    #
    # source://algoliasearch//lib/algolia/client.rb#748
    def with_rate_limits(end_user_ip, rate_limit_api_key, &block); end
  end
end

# A class which encapsulates the HTTPS communication with the Algolia
# API server for cross-app operations.
#
# source://algoliasearch//lib/algolia/account_client.rb#8
class Algolia::AccountClient
  class << self
    # Copies settings, synonyms, rules and objects from the source index to the
    # destination index. The replicas of the source index should not be copied.
    #
    # Throw an exception if the destination index already exists
    # Throw an exception if the indices are on the same application
    #
    # @param source_index the source index object
    # @param destination_index the destination index object
    # @param request_options contains extra parameters to send with your query
    # @raise [AlgoliaError]
    #
    # source://algoliasearch//lib/algolia/account_client.rb#21
    def copy_index(source_index, destination_index, request_options = T.unsafe(nil)); end

    # The method copy settings, synonyms, rules and objects from the source index
    # to the destination index and wait end of indexing. The replicas of the
    # source index should not be copied
    #
    # Throw an exception if the destination index already exists
    # Throw an exception if the indices are on the same application
    #
    # @param source_index the source index object
    # @param destination_index the destination index object
    # @param request_options contains extra parameters to send with your query
    #
    # source://algoliasearch//lib/algolia/account_client.rb#88
    def copy_index!(source_index, destination_index, request_options = T.unsafe(nil)); end
  end
end

# Base exception class for errors thrown by the Algolia
# client library. AlgoliaError will be raised by any
# network operation if Algolia.init() has not been called.
#
# source://algoliasearch//lib/algolia/error.rb#6
class Algolia::AlgoliaError < ::StandardError; end

# An exception class raised when the given object was not found.
#
# source://algoliasearch//lib/algolia/error.rb#24
class Algolia::AlgoliaObjectNotFoundError < ::Algolia::AlgoliaError; end

# An exception class raised when the REST API returns an error.
# The error code and message will be parsed out of the HTTP response,
# which is also included in the response attribute.
#
# source://algoliasearch//lib/algolia/error.rb#12
class Algolia::AlgoliaProtocolError < ::Algolia::AlgoliaError
  # @return [AlgoliaProtocolError] a new instance of AlgoliaProtocolError
  #
  # source://algoliasearch//lib/algolia/error.rb#16
  def initialize(code, message); end

  # Returns the value of attribute code.
  #
  # source://algoliasearch//lib/algolia/error.rb#13
  def code; end

  # Sets the attribute code
  #
  # @param value the value to set the attribute code to.
  #
  # source://algoliasearch//lib/algolia/error.rb#13
  def code=(_arg0); end

  # Returns the value of attribute message.
  #
  # source://algoliasearch//lib/algolia/error.rb#14
  def message; end

  # Sets the attribute message
  #
  # @param value the value to set the attribute message to.
  #
  # source://algoliasearch//lib/algolia/error.rb#14
  def message=(_arg0); end
end

# source://algoliasearch//lib/algolia/analytics.rb#3
class Algolia::Analytics
  # @return [Analytics] a new instance of Analytics
  #
  # source://algoliasearch//lib/algolia/analytics.rb#7
  def initialize(client, params); end

  # source://algoliasearch//lib/algolia/analytics.rb#27
  def add_ab_test(ab_test); end

  # @raise [ArgumentError]
  #
  # source://algoliasearch//lib/algolia/analytics.rb#37
  def delete_ab_test(ab_test_id); end

  # @raise [ArgumentError]
  #
  # source://algoliasearch//lib/algolia/analytics.rb#21
  def get_ab_test(ab_test_id); end

  # source://algoliasearch//lib/algolia/analytics.rb#12
  def get_ab_tests(params = T.unsafe(nil)); end

  # Returns the value of attribute headers.
  #
  # source://algoliasearch//lib/algolia/analytics.rb#4
  def headers; end

  # Returns the value of attribute ssl.
  #
  # source://algoliasearch//lib/algolia/analytics.rb#4
  def ssl; end

  # Returns the value of attribute ssl_version.
  #
  # source://algoliasearch//lib/algolia/analytics.rb#4
  def ssl_version; end

  # @raise [ArgumentError]
  #
  # source://algoliasearch//lib/algolia/analytics.rb#31
  def stop_ab_test(ab_test_id); end

  # source://algoliasearch//lib/algolia/analytics.rb#43
  def wait_task(index_name, taskID, time_before_retry = T.unsafe(nil), request_options = T.unsafe(nil)); end

  private

  # source://algoliasearch//lib/algolia/analytics.rb#49
  def perform_request(method, url, params = T.unsafe(nil), data = T.unsafe(nil)); end
end

# source://algoliasearch//lib/algolia/analytics.rb#5
Algolia::Analytics::API_URL = T.let(T.unsafe(nil), String)

# A class which encapsulates the HTTPS communication with the Algolia
# API server. Uses the HTTPClient library for low-level HTTP communication.
#
# source://algoliasearch//lib/algolia/client.rb#16
class Algolia::Client
  # @raise [ArgumentError]
  # @return [Client] a new instance of Client
  #
  # source://algoliasearch//lib/algolia/client.rb#26
  def initialize(data = T.unsafe(nil)); end

  # Create a new user key
  #
  #  Deprecated call was add_api_key(acl, validity, maxQueriesPerIPPerHour, maxHitsPerQuery, indexes)
  #
  #  ACL can contain an array with those strings:
  #    - search: allow to search (https and http)
  #    - addObject: allows to add/update an object in the index (https only)
  #    - deleteObject : allows to delete an existing object (https only)
  #    - deleteIndex : allows to delete index content (https only)
  #    - settings : allows to get index settings (https only)
  #    - editSettings : allows to change index settings (https only)
  #
  #  @param object The list of parameters for this key.
  #         Defined by a Hash that can contain the following values:
  #          - acl: array of string
  #          - indexes: array of string
  #          - validity: int
  #          - referers: array of string
  #          - description: string
  #          - maxHitsPerQuery: integer
  #          - queryParameters: string
  #          - maxQueriesPerIPPerHour: integer
  #  @param request_options contains extra parameters to send with your query - Default = {}
  #
  # source://algoliasearch//lib/algolia/client.rb#383
  def add_api_key(object, request_options = T.unsafe(nil), max_queries_per_IP_per_hour = T.unsafe(nil), max_hits_per_query = T.unsafe(nil), indexes = T.unsafe(nil)); end

  # Create a new user key
  #
  #  Deprecated call was add_api_key(acl, validity, maxQueriesPerIPPerHour, maxHitsPerQuery, indexes)
  #
  #  ACL can contain an array with those strings:
  #    - search: allow to search (https and http)
  #    - addObject: allows to add/update an object in the index (https only)
  #    - deleteObject : allows to delete an existing object (https only)
  #    - deleteIndex : allows to delete index content (https only)
  #    - settings : allows to get index settings (https only)
  #    - editSettings : allows to change index settings (https only)
  #
  #  @param object The list of parameters for this key.
  #         Defined by a Hash that can contain the following values:
  #          - acl: array of string
  #          - indexes: array of string
  #          - validity: int
  #          - referers: array of string
  #          - description: string
  #          - maxHitsPerQuery: integer
  #          - queryParameters: string
  #          - maxQueriesPerIPPerHour: integer
  #  @param request_options contains extra parameters to send with your query - Default = {}
  #
  # source://algoliasearch//lib/algolia/client.rb#383
  def add_user_key(object, request_options = T.unsafe(nil), max_queries_per_IP_per_hour = T.unsafe(nil), max_hits_per_query = T.unsafe(nil), indexes = T.unsafe(nil)); end

  # Returns the value of attribute api_key.
  #
  # source://algoliasearch//lib/algolia/client.rb#17
  def api_key; end

  # Returns the value of attribute application_id.
  #
  # source://algoliasearch//lib/algolia/client.rb#17
  def application_id; end

  # source://algoliasearch//lib/algolia/client.rb#536
  def assign_user_id(user_id, cluster_name, request_options = T.unsafe(nil)); end

  # Send a batch request targeting multiple indices
  #
  # source://algoliasearch//lib/algolia/client.rb#468
  def batch(operations, request_options = T.unsafe(nil)); end

  # Send a batch request targeting multiple indices and wait the end of the indexing
  #
  # source://algoliasearch//lib/algolia/client.rb#475
  def batch!(operations, request_options = T.unsafe(nil)); end

  # Returns the value of attribute batch_timeout.
  #
  # source://algoliasearch//lib/algolia/client.rb#17
  def batch_timeout; end

  # Returns the value of attribute connect_timeout.
  #
  # source://algoliasearch//lib/algolia/client.rb#17
  def connect_timeout; end

  # Copy an existing index.
  #
  # @param src_index the name of index to copy.
  # @param dst_index the new index name that will contains a copy of srcIndexName (destination will be overriten if it already exist).
  # @param scope the optional list of scopes to copy (all if not specified).
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#203
  def copy_index(src_index, dst_index, scope = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Copy an existing index and wait until the copy has been processed.
  #
  # @param src_index the name of index to copy.
  # @param dst_index the new index name that will contains a copy of srcIndexName (destination will be overriten if it already exist).
  # @param scope the optional list of scopes to copy (all if not specified).
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#217
  def copy_index!(src_index, dst_index, scope = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Copy an existing index rules.
  #
  # @param src_index the name of index to copy.
  # @param dst_index the new index name that will contains a copy of srcIndexName's rules (destination's rules will be overriten if it already exist).
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#278
  def copy_rules(src_index, dst_index, request_options = T.unsafe(nil)); end

  # Copy an existing index rules and wait until the copy has been processed.
  #
  # @param src_index the name of index to copy.
  # @param dst_index the new index name that will contains a copy of srcIndexName rules (destination rules will be overriten if it already exist).
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#289
  def copy_rules!(src_index, dst_index, request_options = T.unsafe(nil)); end

  # Copy an existing index settings.
  #
  # @param src_index the name of index to copy.
  # @param dst_index the new index name that will contains a copy of srcIndexName's settings (destination's settings will be overriten if it already exist).
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#230
  def copy_settings(src_index, dst_index, request_options = T.unsafe(nil)); end

  # Copy an existing index settings and wait until the copy has been processed.
  #
  # @param src_index the name of index to copy.
  # @param dst_index the new index name that will contains a copy of srcIndexName settings (destination settings will be overriten if it already exist).
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#241
  def copy_settings!(src_index, dst_index, request_options = T.unsafe(nil)); end

  # Copy an existing index synonyms.
  #
  # @param src_index the name of index to copy.
  # @param dst_index the new index name that will contains a copy of srcIndexName's synonyms (destination's synonyms will be overriten if it already exist).
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#254
  def copy_synonyms(src_index, dst_index, request_options = T.unsafe(nil)); end

  # Copy an existing index synonyms and wait until the copy has been processed.
  #
  # @param src_index the name of index to copy.
  # @param dst_index the new index name that will contains a copy of srcIndexName synonyms (destination synonyms will be overriten if it already exist).
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#265
  def copy_synonyms!(src_index, dst_index, request_options = T.unsafe(nil)); end

  # source://algoliasearch//lib/algolia/client.rb#617
  def delete(uri, type = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Delete an existing user key
  #
  # source://algoliasearch//lib/algolia/client.rb#454
  def delete_api_key(key, request_options = T.unsafe(nil)); end

  # Delete an index
  #
  # @param name the name of the index to delete
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#300
  def delete_index(name, request_options = T.unsafe(nil)); end

  # Delete an index and wait until the deletion has been processed.
  #
  # @param name the name of the index to delete
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#309
  def delete_index!(name, request_options = T.unsafe(nil)); end

  # Delete an existing user key
  #
  # source://algoliasearch//lib/algolia/client.rb#454
  def delete_user_key(key, request_options = T.unsafe(nil)); end

  # source://algoliasearch//lib/algolia/client.rb#49
  def destroy; end

  # Disable IP rate limit enabled with enableRateLimitForward() function
  #
  # source://algoliasearch//lib/algolia/client.rb#94
  def disable_rate_limit_forward; end

  # Allow to use IP rate limit when you have a proxy between end-user and Algolia.
  # This option will set the X-Forwarded-For HTTP header with the client IP and the X-Forwarded-API-Key with the API Key having rate limits.
  #
  # @param admin_api_key the admin API Key you can find in your dashboard
  # @param end_user_ip the end user IP (you can use both IPV4 or IPV6 syntax)
  # @param rate_limit_api_key the API key on which you have a rate limit
  #
  # source://algoliasearch//lib/algolia/client.rb#85
  def enable_rate_limit_forward(admin_api_key, end_user_ip, rate_limit_api_key); end

  # source://algoliasearch//lib/algolia/client.rb#605
  def get(uri, type = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Get ACL of a user key
  #
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#354
  def get_api_key(key, request_options = T.unsafe(nil)); end

  # Return last logs entries.
  #
  # @param options - accepts those keys:
  #   - offset Specify the first entry to retrieve (0-based, 0 is the most recent log entry) - Default = 0
  #   - length Specify the maximum number of entries to retrieve starting at offset. Maximum allowed value: 1000 - Default = 10
  #   - type Type of log entries to retrieve ("all", "query", "build" or "error") - Default = 'all'
  #   - request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#322
  def get_logs(options = T.unsafe(nil), length = T.unsafe(nil), type = T.unsafe(nil)); end

  # source://algoliasearch//lib/algolia/client.rb#513
  def get_personalization_strategy(request_options = T.unsafe(nil)); end

  # Check the status of a task on the server.
  # All server task are asynchronous and you can check the status of a task with this method.
  #
  # @param index_name the index name owning the taskID
  # @param taskID the id of the task returned by server
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#490
  def get_task_status(index_name, taskID, request_options = T.unsafe(nil)); end

  # source://algoliasearch//lib/algolia/client.rb#532
  def get_top_user_ids(request_options = T.unsafe(nil)); end

  # source://algoliasearch//lib/algolia/client.rb#543
  def get_user_id(user_id, request_options = T.unsafe(nil)); end

  # Get ACL of a user key
  #
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#354
  def get_user_key(key, request_options = T.unsafe(nil)); end

  # Returns the value of attribute headers.
  #
  # source://algoliasearch//lib/algolia/client.rb#17
  def headers; end

  # Returns the value of attribute hosts.
  #
  # source://algoliasearch//lib/algolia/client.rb#17
  def hosts; end

  # Initialize analytics helper
  #
  # source://algoliasearch//lib/algolia/client.rb#66
  def init_analytics; end

  # Initialize a new index
  #
  # source://algoliasearch//lib/algolia/client.rb#59
  def init_index(name); end

  # List all existing user keys with their associated ACLs
  #
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#345
  def list_api_keys(request_options = T.unsafe(nil)); end

  # Multicluster management
  #
  # source://algoliasearch//lib/algolia/client.rb#524
  def list_clusters(request_options = T.unsafe(nil)); end

  # List all existing indexes
  # return an Answer object with answer in the form
  #     {"items": [{ "name": "contacts", "createdAt": "2013-01-18T15:33:13.556Z"},
  #                {"name": "notes", "createdAt": "2013-01-18T15:33:13.556Z"}]}
  #
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#166
  def list_indexes(request_options = T.unsafe(nil)); end

  # source://algoliasearch//lib/algolia/client.rb#528
  def list_user_ids(page = T.unsafe(nil), hits_per_page = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # List all existing user keys with their associated ACLs
  # Deprecated
  #
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#345
  def list_user_keys(request_options = T.unsafe(nil)); end

  # Move an existing index.
  #
  # @param src_index the name of index to copy.
  # @param dst_index the new index name that will contains a copy of srcIndexName (destination will be overriten if it already exist).
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#177
  def move_index(src_index, dst_index, request_options = T.unsafe(nil)); end

  # Move an existing index and wait until the move has been processed
  #
  # @param src_index the name of index to copy.
  # @param dst_index the new index name that will contains a copy of srcIndexName (destination will be overriten if it already exist).
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#189
  def move_index!(src_index, dst_index, request_options = T.unsafe(nil)); end

  # Get objects by objectID across multiple indexes
  #
  #     ]
  #
  # @param requests [{ "indexName" => index_name_1, "objectID" => "obj1" }, { "indexName" => index_name_2, "objectID" => "obj2" }] equests [
  #   { "indexName" => index_name_1, "objectID" => "obj1" },
  #   { "indexName" => index_name_2, "objectID" => "obj2" }
  #
  # source://algoliasearch//lib/algolia/client.rb#154
  def multiple_get_objects(requests, request_options = T.unsafe(nil)); end

  # This method allows to query multiple indexes with one API call
  #
  # @param queries the array of hash representing the query and associated index name
  # @param options - accepts those keys:
  #   - index_name_key the name of the key used to fetch the index_name (:index_name by default)
  #   - strategy define the strategy applied on the sequential searches (none by default)
  #   - request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#121
  def multiple_queries(queries, options = T.unsafe(nil), strategy = T.unsafe(nil)); end

  # source://algoliasearch//lib/algolia/client.rb#609
  def post(uri, body = T.unsafe(nil), type = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # source://algoliasearch//lib/algolia/client.rb#613
  def put(uri, body = T.unsafe(nil), type = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Returns the value of attribute receive_timeout.
  #
  # source://algoliasearch//lib/algolia/client.rb#17
  def receive_timeout; end

  # source://algoliasearch//lib/algolia/client.rb#547
  def remove_user_id(user_id, request_options = T.unsafe(nil)); end

  # Perform an HTTP request for the given uri and method
  # with common basic response handling. Will raise a
  # AlgoliaProtocolError if the response has an error status code,
  # and will return the parsed JSON body on success, if there is one.
  #
  # @raise [AlgoliaProtocolError]
  #
  # source://algoliasearch//lib/algolia/client.rb#566
  def request(uri, method, data = T.unsafe(nil), type = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Restore a deleted api key
  #
  # source://algoliasearch//lib/algolia/client.rb#461
  def restore_api_key(key, request_options = T.unsafe(nil)); end

  # Returns the value of attribute search_hosts.
  #
  # source://algoliasearch//lib/algolia/client.rb#17
  def search_hosts; end

  # Returns the value of attribute search_timeout.
  #
  # source://algoliasearch//lib/algolia/client.rb#17
  def search_timeout; end

  # source://algoliasearch//lib/algolia/client.rb#553
  def search_user_id(query, cluster_name = T.unsafe(nil), page = T.unsafe(nil), hits_per_page = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Returns the value of attribute send_timeout.
  #
  # source://algoliasearch//lib/algolia/client.rb#17
  def send_timeout; end

  # Allow to set custom headers
  #
  # source://algoliasearch//lib/algolia/client.rb#73
  def set_extra_header(key, value); end

  # source://algoliasearch//lib/algolia/client.rb#517
  def set_personalization_strategy(strategy, request_options = T.unsafe(nil)); end

  # Returns the value of attribute ssl.
  #
  # source://algoliasearch//lib/algolia/client.rb#17
  def ssl; end

  # Returns the value of attribute ssl_version.
  #
  # source://algoliasearch//lib/algolia/client.rb#17
  def ssl_version; end

  # Update a user key
  #
  #  Deprecated call was update_api_key(key, acl, validity, max_queries_per_IP_per_hour, max_hits_per_query, indexes)
  #
  #  ACL can contain an array with those strings:
  #    - search: allow to search (https and http)
  #    - addObject: allows to add/update an object in the index (https only)
  #    - deleteObject : allows to delete an existing object (https only)
  #    - deleteIndex : allows to delete index content (https only)
  #    - settings : allows to get index settings (https only)
  #    - editSettings : allows to change index settings (https only)
  #
  #  @param key API Key to update
  #  @param object The list of parameters for this key.
  #         Defined by a Hash that can contain the following values:
  #          - acl: array of string
  #          - indexes: array of string
  #          - validity: int
  #          - referers: array of string
  #          - description: string
  #          - maxHitsPerQuery: integer
  #          - queryParameters: string
  #          - maxQueriesPerIPPerHour: integer
  #  @param request_options contains extra parameters to send with your query - Default = {}
  #
  # source://algoliasearch//lib/algolia/client.rb#430
  def update_api_key(key, object, request_options = T.unsafe(nil), max_queries_per_IP_per_hour = T.unsafe(nil), max_hits_per_query = T.unsafe(nil), indexes = T.unsafe(nil)); end

  # Update a user key
  #
  #  Deprecated call was update_api_key(key, acl, validity, max_queries_per_IP_per_hour, max_hits_per_query, indexes)
  #
  #  ACL can contain an array with those strings:
  #    - search: allow to search (https and http)
  #    - addObject: allows to add/update an object in the index (https only)
  #    - deleteObject : allows to delete an existing object (https only)
  #    - deleteIndex : allows to delete index content (https only)
  #    - settings : allows to get index settings (https only)
  #    - editSettings : allows to change index settings (https only)
  #
  #  @param key API Key to update
  #  @param object The list of parameters for this key.
  #         Defined by a Hash that can contain the following values:
  #          - acl: array of string
  #          - indexes: array of string
  #          - validity: int
  #          - referers: array of string
  #          - description: string
  #          - maxHitsPerQuery: integer
  #          - queryParameters: string
  #          - maxQueriesPerIPPerHour: integer
  #  @param request_options contains extra parameters to send with your query - Default = {}
  #
  # source://algoliasearch//lib/algolia/client.rb#430
  def update_user_key(key, object, request_options = T.unsafe(nil), max_queries_per_IP_per_hour = T.unsafe(nil), max_hits_per_query = T.unsafe(nil), indexes = T.unsafe(nil)); end

  # Wait the publication of a task on the server.
  # All server task are asynchronous and you can check with this method that the task is published.
  #
  # @param index_name the index name owning the taskID
  # @param taskID the id of the task returned by server
  # @param time_before_retry the time in milliseconds before retry (default = 100ms)
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/client.rb#503
  def wait_task(index_name, taskID, time_before_retry = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Convenience method thats wraps enable_rate_limit_forward/disable_rate_limit_forward
  #
  # source://algoliasearch//lib/algolia/client.rb#103
  def with_rate_limits(end_user_ip, rate_limit_api_key, &block); end

  private

  # source://algoliasearch//lib/algolia/client.rb#676
  def add_header_to_request_options(request_options, headers_to_add); end

  # source://algoliasearch//lib/algolia/client.rb#655
  def perform_request(session, url, method, data, request_options); end

  # This method returns a thread-local array of sessions
  #
  # source://algoliasearch//lib/algolia/client.rb#626
  def thread_local_hosts(read); end
end

# source://algoliasearch//lib/algolia/client.rb#22
Algolia::Client::DEFAULT_BATCH_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://algoliasearch//lib/algolia/client.rb#19
Algolia::Client::DEFAULT_CONNECT_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://algoliasearch//lib/algolia/client.rb#20
Algolia::Client::DEFAULT_RECEIVE_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://algoliasearch//lib/algolia/client.rb#23
Algolia::Client::DEFAULT_SEARCH_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://algoliasearch//lib/algolia/client.rb#21
Algolia::Client::DEFAULT_SEND_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://algoliasearch//lib/algolia/client.rb#24
Algolia::Client::DEFAULT_USER_AGENT = T.let(T.unsafe(nil), Array)

# source://algoliasearch//lib/algolia/index.rb#6
class Algolia::Index
  # @return [Index] a new instance of Index
  #
  # source://algoliasearch//lib/algolia/index.rb#9
  def initialize(name, client = T.unsafe(nil)); end

  # Create a new user key
  #
  #  @param object can be two different parameters:
  #        The list of parameters for this key. Defined by a Hash that can
  #        contains the following values:
  #          - acl: array of string
  #          - validity: int
  #          - referers: array of string
  #          - description: string
  #          - maxHitsPerQuery: integer
  #          - queryParameters: string
  #          - maxQueriesPerIPPerHour: integer
  #        Or the list of ACL for this key. Defined by an array of String that
  #        can contains the following values:
  #          - search: allow to search (https and http)
  #          - addObject: allows to add/update an object in the index (https only)
  #          - deleteObject : allows to delete an existing object (https only)
  #          - deleteIndex : allows to delete index content (https only)
  #          - settings : allows to get index settings (https only)
  #          - editSettings : allows to change index settings (https only)
  #  @param validity the number of seconds after which the key will be automatically removed (0 means no time limit for this key)
  #  @param max_queries_per_IP_per_hour the maximum number of API calls allowed from an IP address per hour (0 means unlimited)
  #  @param max_hits_per_query the maximum number of hits this API key can retrieve in one call (0 means unlimited)
  #  @param request_options contains extra parameters to send with your query
  #  	# Deprecated: Please use `client.add_api_key` instead
  #
  # source://algoliasearch//lib/algolia/index.rb#733
  def add_api_key(object, validity = T.unsafe(nil), max_queries_per_IP_per_hour = T.unsafe(nil), max_hits_per_query = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Add an object in this index
  #
  # @param object the object to add to the index.
  #   The object is represented by an associative array
  # @param objectID [optional] an objectID you want to attribute to this object
  #   (if the attribute already exist the old object will be overridden)
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#49
  def add_object(object, objectID = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Add an object in this index and wait end of indexing
  #
  # @param object the object to add to the index.
  #   The object is represented by an associative array
  # @param objectID [optional] an objectID you want to attribute to this object
  #   (if the attribute already exist the old object will be overridden)
  # @param Request options object. Contains extra URL parameters or headers
  #
  # source://algoliasearch//lib/algolia/index.rb#67
  def add_object!(object, objectID = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Add several objects in this index
  #
  # @param objects the array of objects to add inside the index.
  #   Each object is represented by an associative array
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#80
  def add_objects(objects, request_options = T.unsafe(nil)); end

  # Add several objects in this index and wait end of indexing
  #
  # @param objects the array of objects to add inside the index.
  #   Each object is represented by an associative array
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#91
  def add_objects!(objects, request_options = T.unsafe(nil)); end

  # Create a new user key
  #
  #  @param object can be two different parameters:
  #        The list of parameters for this key. Defined by a Hash that can
  #        contains the following values:
  #          - acl: array of string
  #          - validity: int
  #          - referers: array of string
  #          - description: string
  #          - maxHitsPerQuery: integer
  #          - queryParameters: string
  #          - maxQueriesPerIPPerHour: integer
  #        Or the list of ACL for this key. Defined by an array of String that
  #        can contains the following values:
  #          - search: allow to search (https and http)
  #          - addObject: allows to add/update an object in the index (https only)
  #          - deleteObject : allows to delete an existing object (https only)
  #          - deleteIndex : allows to delete index content (https only)
  #          - settings : allows to get index settings (https only)
  #          - editSettings : allows to change index settings (https only)
  #  @param validity the number of seconds after which the key will be automatically removed (0 means no time limit for this key)
  #  @param max_queries_per_IP_per_hour the maximum number of API calls allowed from an IP address per hour (0 means unlimited)
  #  @param max_hits_per_query the maximum number of hits this API key can retrieve in one call (0 means unlimited)
  #  @param request_options contains extra parameters to send with your query
  #  	# Deprecated: Please use `client.add_api_key` instead
  #
  # source://algoliasearch//lib/algolia/index.rb#733
  def add_user_key(object, validity = T.unsafe(nil), max_queries_per_IP_per_hour = T.unsafe(nil), max_hits_per_query = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Send a batch request
  #
  # source://algoliasearch//lib/algolia/index.rb#799
  def batch(request, request_options = T.unsafe(nil)); end

  # Send a batch request and wait the end of the indexing
  #
  # source://algoliasearch//lib/algolia/index.rb#806
  def batch!(request, request_options = T.unsafe(nil)); end

  # Add/Update an array of rules
  #
  # @param rules the array of rules to add/update
  # @param forward_to_replicas should we forward the delete to replica indices
  # @param clear_existing_rules should we clear the existing rules before adding the new ones
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#1216
  def batch_rules(rules, forward_to_replicas = T.unsafe(nil), clear_existing_rules = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Add/Update an array of rules and wait the end of indexing
  #
  # @param rules the array of rules to add/update
  # @param forward_to_replicas should we forward the delete to replica indices
  # @param clear_existing_rules should we clear the existing rules before adding the new ones
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#1228
  def batch_rules!(rules, forward_to_replicas = T.unsafe(nil), clear_existing_rules = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Add/Update an array of synonyms
  #
  # @param synonyms the array of synonyms to add/update
  # @param forward_to_replicas should we forward the delete to replica indices
  # @param replace_existing_synonyms should we replace the existing synonyms before adding the new ones
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#1039
  def batch_synonyms(synonyms, forward_to_replicas = T.unsafe(nil), replace_existing_synonyms = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Add/Update an array of synonyms and wait the end of indexing
  #
  # @param synonyms the array of synonyms to add/update
  # @param forward_to_replicas should we forward the delete to replica indices
  # @param replace_existing_synonyms should we replace the existing synonyms before adding the new ones
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#1051
  def batch_synonyms!(synonyms, forward_to_replicas = T.unsafe(nil), replace_existing_synonyms = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Browse all index content
  #
  # @DEPRECATED:
  #
  # @param queryParameters The hash of query parameters to use to browse
  #   To browse from a specific cursor, just add a ":cursor" parameters
  # @param queryParameters An optional second parameters hash here for backward-compatibility (which will be merged with the first)
  # @param request_options contains extra parameters to send with your query
  # @param page Pagination parameter used to select the page to retrieve.
  # @param hits_per_page Pagination parameter used to select the number of hits per page. Defaults to 1000.
  #
  # source://algoliasearch//lib/algolia/index.rb#203
  def browse(page_or_query_parameters = T.unsafe(nil), hits_per_page = T.unsafe(nil), request_options = T.unsafe(nil), &block); end

  # Browse a single page from a specific cursor
  #
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#230
  def browse_from(cursor, hits_per_page = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Delete the index content
  #
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#652
  def clear(request_options = T.unsafe(nil)); end

  # Delete the index content and wait end of indexing
  #
  # source://algoliasearch//lib/algolia/index.rb#660
  def clear!(request_options = T.unsafe(nil)); end

  # Delete the index content
  #
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#652
  def clear_index(request_options = T.unsafe(nil)); end

  # Delete the index content and wait end of indexing
  #
  # source://algoliasearch//lib/algolia/index.rb#660
  def clear_index!(request_options = T.unsafe(nil)); end

  # Clear all rules
  #
  # @param forward_to_replicas should we forward the delete to replica indices
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#1192
  def clear_rules(forward_to_replicas = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Clear all rules and wait the end of indexing
  #
  # @param forward_to_replicas should we forward the delete to replica indices
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#1202
  def clear_rules!(forward_to_replicas = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Clear all synonyms
  #
  # @param forward_to_replicas should we forward the delete to replica indices
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#1015
  def clear_synonyms(forward_to_replicas = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Clear all synonyms and wait the end of indexing
  #
  # @param forward_to_replicas should we forward the delete to replica indices
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#1025
  def clear_synonyms!(forward_to_replicas = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Returns the value of attribute client.
  #
  # source://algoliasearch//lib/algolia/index.rb#7
  def client; end

  # Sets the attribute client
  #
  # @param value the value to set the attribute client to.
  #
  # source://algoliasearch//lib/algolia/index.rb#7
  def client=(_arg0); end

  # Delete an index
  #
  # return an hash of the form { "deletedAt" => "2013-01-18T15:33:13.556Z", "taskID" => "42" }
  #
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#21
  def delete(request_options = T.unsafe(nil)); end

  # Delete an index and wait until the deletion has been processed
  #
  # return an hash of the form { "deletedAt" => "2013-01-18T15:33:13.556Z", "taskID" => "42" }
  #
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#33
  def delete!(request_options = T.unsafe(nil)); end

  # Delete an existing user key
  #
  # Deprecated: Please use `client.delete_api_key` instead
  #
  # source://algoliasearch//lib/algolia/index.rb#792
  def delete_api_key(key, request_options = T.unsafe(nil)); end

  # Delete all objects matching a query (doesn't work with actual text queries)
  # This method deletes every record matching the filters provided
  #
  # @param params query parameters
  # @param request_options contains extra parameters to send with your query
  # @raise [ArgumentError]
  #
  # source://algoliasearch//lib/algolia/index.rb#629
  def delete_by(params, request_options = T.unsafe(nil)); end

  # Delete all objects matching a query (doesn't work with actual text queries)
  # This method deletes every record matching the filters provided and waits for the end of indexing
  #
  # @param params query parameters
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#641
  def delete_by!(params, request_options = T.unsafe(nil)); end

  # Delete all objects matching a query
  # This method retrieves all objects synchronously but deletes in batch
  # asynchronously
  #
  # @param query the query string
  # @param params the optional query parameters
  # @param request_options contains extra parameters to send with your query
  # @raise [ArgumentError]
  #
  # source://algoliasearch//lib/algolia/index.rb#584
  def delete_by_query(query, params = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Delete all objects matching a query and wait end of indexing
  #
  # @param query the query string
  # @param params the optional query parameters
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#616
  def delete_by_query!(query, params = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Delete an index
  #
  # return an hash of the form { "deletedAt" => "2013-01-18T15:33:13.556Z", "taskID" => "42" }
  #
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#21
  def delete_index(request_options = T.unsafe(nil)); end

  # Delete an index and wait until the deletion has been processed
  #
  # return an hash of the form { "deletedAt" => "2013-01-18T15:33:13.556Z", "taskID" => "42" }
  #
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#33
  def delete_index!(request_options = T.unsafe(nil)); end

  # Delete an object from the index
  #
  # @param objectID the unique identifier of object to delete
  # @param request_options contains extra parameters to send with your query
  # @raise [ArgumentError]
  #
  # source://algoliasearch//lib/algolia/index.rb#535
  def delete_object(objectID, request_options = T.unsafe(nil)); end

  # Delete an object from the index and wait end of indexing
  #
  # @param objectID the unique identifier of object to delete
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#546
  def delete_object!(objectID, request_options = T.unsafe(nil)); end

  # Delete several objects
  #
  # @param objects an array of objectIDs
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#558
  def delete_objects(objects, request_options = T.unsafe(nil)); end

  # Delete several objects and wait end of indexing
  #
  # @param objects an array of objectIDs
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#569
  def delete_objects!(objects, request_options = T.unsafe(nil)); end

  # Delete a rule
  #
  # @param objectID the rule objectID
  # @param forward_to_replicas should we forward the delete to replica indices
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#1142
  def delete_rule(objectID, forward_to_replicas = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Delete a rule and wait the end of indexing
  #
  # @param objectID the rule objectID
  # @param forward_to_replicas should we forward the delete to replica indices
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#1153
  def delete_rule!(objectID, forward_to_replicas = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Delete a synonym
  #
  # @param objectID the synonym objectID
  # @param forward_to_replicas should we forward the delete to replica indices
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#966
  def delete_synonym(objectID, forward_to_replicas = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Delete a synonym and wait the end of indexing
  #
  # @param objectID the synonym objectID
  # @param forward_to_replicas should we forward the delete to replica indices
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#977
  def delete_synonym!(objectID, forward_to_replicas = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Delete an existing user key
  #
  # Deprecated: Please use `client.delete_api_key` instead
  #
  # source://algoliasearch//lib/algolia/index.rb#792
  def delete_user_key(key, request_options = T.unsafe(nil)); end

  # Check whether an index exists or not
  #
  # @return [Boolean]
  #
  # source://algoliasearch//lib/algolia/index.rb#1285
  def exists; end

  # Check whether an index exists or not
  # Aliases the exists method
  #
  # @return [Boolean]
  #
  # source://algoliasearch//lib/algolia/index.rb#1285
  def exists?; end

  # Export the full list of rules
  # Accepts an optional block to which it will pass each rule
  # Also returns an array with all the rules
  #
  # @param hits_per_page Amount of rules to retrieve on each internal request - Optional - Default: 100
  # @param request_options contains extra parameters to send with your query - Optional
  #
  # source://algoliasearch//lib/algolia/index.rb#1265
  def export_rules(hits_per_page = T.unsafe(nil), request_options = T.unsafe(nil), &_block); end

  # Export the full list of synonyms
  # Accepts an optional block to which it will pass each synonym
  # Also returns an array with all the synonyms
  #
  # @param hits_per_page Amount of synonyms to retrieve on each internal request - Optional - Default: 100
  # @param request_options contains extra parameters to send with your query - Optional
  #
  # source://algoliasearch//lib/algolia/index.rb#1088
  def export_synonyms(hits_per_page = T.unsafe(nil), request_options = T.unsafe(nil), &_block); end

  # Find object by the given condition.
  #
  # Options can be passed in request_options body:
  #  - query (string): pass a query
  #  - paginate (bool): choose if you want to iterate through all the
  # documents (true) or only the first page (false). Default is true.
  # The function takes a block to filter the results from search query
  # Usage example:
  #  index.find_object({'query' => '', 'paginate' => true}) {|obj| obj.key?('company') and obj['company'] == 'Apple'}
  #
  # @param request_options contains extra parameters to send with your query
  # @return [Hash] the matching object and its position in the result set
  #
  # source://algoliasearch//lib/algolia/index.rb#282
  def find_object(request_options = T.unsafe(nil)); end

  # Get ACL of a user key
  #
  # Deprecated: Please us `client.get_api_key` instead.
  #
  # source://algoliasearch//lib/algolia/index.rb#703
  def get_api_key(key, request_options = T.unsafe(nil)); end

  # Get an object from this index
  #
  # @param objectID the unique identifier of the object to retrieve
  # @param attributes_to_retrieve [optional] if set, contains the list of attributes to retrieve as an array of strings of a string separated by ","
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#241
  def get_object(objectID, attributes_to_retrieve = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Get a list of objects from this index
  #
  # @param objectIDs the array of unique identifier of the objects to retrieve
  # @param attributes_to_retrieve [optional] if set, contains the list of attributes to retrieve as an array of strings of a string separated by ","
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#257
  def get_objects(objectIDs, attributes_to_retrieve = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Get a rule
  #
  # @param objectID the rule objectID
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#1131
  def get_rule(objectID, request_options = T.unsafe(nil)); end

  # Get settings of this index
  #
  # source://algoliasearch//lib/algolia/index.rb#686
  def get_settings(options = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Get a synonym
  #
  # @param objectID the synonym objectID
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#955
  def get_synonym(objectID, request_options = T.unsafe(nil)); end

  # Check the status of a task on the server.
  # All server task are asynchronous and you can check the status of a task with this method.
  #
  # @param taskID the id of the task returned by server
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#343
  def get_task_status(taskID, request_options = T.unsafe(nil)); end

  # Get ACL of a user key
  #
  # Deprecated: Please us `client.get_api_key` instead.
  # Deprecated
  #
  # source://algoliasearch//lib/algolia/index.rb#703
  def get_user_key(key, request_options = T.unsafe(nil)); end

  # List all existing user keys with their associated ACLs
  #
  # Deprecated: Please us `client.list_api_keys` instead.
  #
  # source://algoliasearch//lib/algolia/index.rb#695
  def list_api_keys(request_options = T.unsafe(nil)); end

  # List all existing user keys with their associated ACLs
  #
  # Deprecated: Please us `client.list_api_keys` instead.
  #
  # source://algoliasearch//lib/algolia/index.rb#695
  def list_user_keys(request_options = T.unsafe(nil)); end

  # Returns the value of attribute name.
  #
  # source://algoliasearch//lib/algolia/index.rb#7
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://algoliasearch//lib/algolia/index.rb#7
  def name=(_arg0); end

  # Update partially an object (only update attributes passed in argument)
  #
  # @param object the object attributes to override
  # @param objectID the associated objectID, if nil 'object' must contain an 'objectID' key
  # @param create_if_not_exits a boolean, if true creates the object if this one doesn't exist
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#483
  def partial_update_object(object, objectID = T.unsafe(nil), create_if_not_exits = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Update partially an object (only update attributes passed in argument) and wait indexing
  #
  # @param object the attributes to override
  # @param objectID the associated objectID, if nil 'object' must contain an 'objectID' key
  # @param create_if_not_exits a boolean, if true creates the object if this one doesn't exist
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#523
  def partial_update_object!(object, objectID = T.unsafe(nil), create_if_not_exits = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Partially override the content of several objects
  #
  # @param objects an array of objects to update (each object must contains a objectID attribute)
  # @param create_if_not_exits a boolean, if true create the objects if they don't exist
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#494
  def partial_update_objects(objects, create_if_not_exits = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Partially override the content of several objects and wait end of indexing
  #
  # @param objects an array of objects to update (each object must contains a objectID attribute)
  # @param create_if_not_exits a boolean, if true create the objects if they don't exist
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#509
  def partial_update_objects!(objects, create_if_not_exits = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Override the current objects by the given array of objects and wait end of indexing. Settings,
  # synonyms and query rules are untouched. The objects are replaced without any downtime.
  #
  # @param objects the array of objects to save
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#412
  def replace_all_objects(objects, request_options = T.unsafe(nil)); end

  # Override the current objects by the given array of objects and wait end of indexing
  #
  # @param objects the array of objects to save
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#471
  def replace_all_objects!(objects, request_options = T.unsafe(nil)); end

  # Replace rules in the index by the given array of rules
  #
  # @param rules the array of rules to add
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#1240
  def replace_all_rules(rules, request_options = T.unsafe(nil)); end

  # Replace rules in the index by the given array of rules and wait the end of indexing
  #
  # @param rules the array of rules to add
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#1251
  def replace_all_rules!(rules, request_options = T.unsafe(nil)); end

  # Replace synonyms in the index by the given array of synonyms
  #
  # @param synonyms the array of synonyms to add
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#1063
  def replace_all_synonyms(synonyms, request_options = T.unsafe(nil)); end

  # Replace synonyms in the index by the given array of synonyms and wait the end of indexing
  #
  # @param synonyms the array of synonyms to add
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#1074
  def replace_all_synonyms!(synonyms, request_options = T.unsafe(nil)); end

  # Override the content of an object
  #
  # @param object the object to save
  # @param objectID the associated objectID, if nil 'object' must contain an 'objectID' key
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#366
  def save_object(object, objectID = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Override the content of object and wait end of indexing
  #
  # @param object the object to save
  # @param objectID the associated objectID, if nil 'object' must contain an 'objectID' key
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#377
  def save_object!(object, objectID = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Override the content of several objects
  #
  # @param objects the array of objects to save, each object must contain an 'objectID' key
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#389
  def save_objects(objects, request_options = T.unsafe(nil)); end

  # Override the content of several objects and wait end of indexing
  #
  # @param objects the array of objects to save, each object must contain an objectID attribute
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#399
  def save_objects!(objects, request_options = T.unsafe(nil)); end

  # Save a rule
  #
  # @param objectID the rule objectID
  # @param rule the rule
  # @param forward_to_replicas should we forward the delete to replica indices
  # @param request_options contains extra parameters to send with your query
  # @raise [ArgumentError]
  #
  # source://algoliasearch//lib/algolia/index.rb#1167
  def save_rule(objectID, rule, forward_to_replicas = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Save a rule and wait the end of indexing
  #
  # @param objectID the rule objectID
  # @param rule the rule
  # @param forward_to_replicas should we forward the delete to replica indices
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#1180
  def save_rule!(objectID, rule, forward_to_replicas = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Save a synonym
  #
  # @param objectID the synonym objectID
  # @param synonym the synonym
  # @param forward_to_replicas should we forward the delete to replica indices
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#991
  def save_synonym(objectID, synonym, forward_to_replicas = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Save a synonym and wait the end of indexing
  #
  # @param objectID the synonym objectID
  # @param synonym the synonym
  # @param forward_to_replicas should we forward the delete to replica indices
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#1003
  def save_synonym!(objectID, synonym, forward_to_replicas = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Search inside the index
  #
  # - page: (integer) Pagination parameter used to select the page to retrieve.
  #                   Page is zero-based and defaults to 0. Thus, to retrieve the 10th page you need to set page=9
  # - hitsPerPage: (integer) Pagination parameter used to select the number of hits per page. Defaults to 20.
  # - attributesToRetrieve: a string that contains the list of object attributes you want to retrieve (let you minimize the answer size).
  #   Attributes are separated with a comma (for example "name,address").
  #   You can also use a string array encoding (for example ["name","address"]).
  #   By default, all attributes are retrieved. You can also use '*' to retrieve all values when an attributesToRetrieve setting is specified for your index.
  # - attributesToHighlight: a string that contains the list of attributes you want to highlight according to the query.
  #   Attributes are separated by a comma. You can also use a string array encoding (for example ["name","address"]).
  #   If an attribute has no match for the query, the raw value is returned. By default all indexed text attributes are highlighted.
  #   You can use `*` if you want to highlight all textual attributes. Numerical attributes are not highlighted.
  #   A matchLevel is returned for each highlighted attribute and can contain:
  #      - full: if all the query terms were found in the attribute,
  #      - partial: if only some of the query terms were found,
  #      - none: if none of the query terms were found.
  # - attributesToSnippet: a string that contains the list of attributes to snippet alongside the number of words to return (syntax is `attributeName:nbWords`).
  #    Attributes are separated by a comma (Example: attributesToSnippet=name:10,content:10).
  #    You can also use a string array encoding (Example: attributesToSnippet: ["name:10","content:10"]). By default no snippet is computed.
  # - minWordSizefor1Typo: the minimum number of characters in a query word to accept one typo in this word. Defaults to 3.
  # - minWordSizefor2Typos: the minimum number of characters in a query word to accept two typos in this word. Defaults to 7.
  # - getRankingInfo: if set to 1, the result hits will contain ranking information in _rankingInfo attribute.
  # - aroundLatLng: search for entries around a given latitude/longitude (specified as two floats separated by a comma).
  #   For example aroundLatLng=47.316669,5.016670).
  #   You can specify the maximum distance in meters with the aroundRadius parameter (in meters) and the precision for ranking with aroundPrecision
  #   (for example if you set aroundPrecision=100, two objects that are distant of less than 100m will be considered as identical for "geo" ranking parameter).
  #   At indexing, you should specify geoloc of an object with the _geoloc attribute (in the form {"_geoloc":{"lat":48.853409, "lng":2.348800}})
  # - insideBoundingBox: search entries inside a given area defined by the two extreme points of a rectangle (defined by 4 floats: p1Lat,p1Lng,p2Lat,p2Lng).
  #   For example insideBoundingBox=47.3165,4.9665,47.3424,5.0201).
  #   At indexing, you should specify geoloc of an object with the _geoloc attribute (in the form {"_geoloc":{"lat":48.853409, "lng":2.348800}})
  # - numericFilters: a string that contains the list of numeric filters you want to apply separated by a comma.
  #   The syntax of one filter is `attributeName` followed by `operand` followed by `value`. Supported operands are `<`, `<=`, `=`, `>` and `>=`.
  #   You can have multiple conditions on one attribute like for example numericFilters=price>100,price<1000.
  #   You can also use a string array encoding (for example numericFilters: ["price>100","price<1000"]).
  # - tagFilters: filter the query by a set of tags. You can AND tags by separating them by commas.
  #   To OR tags, you must add parentheses. For example, tags=tag1,(tag2,tag3) means tag1 AND (tag2 OR tag3).
  #   You can also use a string array encoding, for example tagFilters: ["tag1",["tag2","tag3"]] means tag1 AND (tag2 OR tag3).
  #   At indexing, tags should be added in the _tags** attribute of objects (for example {"_tags":["tag1","tag2"]}).
  # - facetFilters: filter the query by a list of facets.
  #   Facets are separated by commas and each facet is encoded as `attributeName:value`.
  #   For example: `facetFilters=category:Book,author:John%20Doe`.
  #   You can also use a string array encoding (for example `["category:Book","author:John%20Doe"]`).
  # - facets: List of object attributes that you want to use for faceting.
  #   Attributes are separated with a comma (for example `"category,author"` ).
  #   You can also use a JSON string array encoding (for example ["category","author"]).
  #   Only attributes that have been added in **attributesForFaceting** index setting can be used in this parameter.
  #   You can also use `*` to perform faceting on all attributes specified in **attributesForFaceting**.
  # - queryType: select how the query words are interpreted, it can be one of the following value:
  #    - prefixAll: all query words are interpreted as prefixes,
  #    - prefixLast: only the last word is interpreted as a prefix (default behavior),
  #    - prefixNone: no query word is interpreted as a prefix. This option is not recommended.
  # - optionalWords: a string that contains the list of words that should be considered as optional when found in the query.
  #   The list of words is comma separated.
  # - distinct: If set to 1, enable the distinct feature (disabled by default) if the attributeForDistinct index setting is set.
  #   This feature is similar to the SQL "distinct" keyword: when enabled in a query with the distinct=1 parameter,
  #   all hits containing a duplicate value for the attributeForDistinct attribute are removed from results.
  #   For example, if the chosen attribute is show_name and several hits have the same value for show_name, then only the best
  #   one is kept and others are removed.
  #
  # @param query the full text query
  # @param args [optional] if set, contains an associative array with query parameters:
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#161
  def search(query, params = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Perform a search with disjunctive facets generating as many queries as number of disjunctive facets
  #
  # @param query the query
  # @param disjunctive_facets the array of disjunctive facets
  # @param params a hash representing the regular query parameters
  # @param refinements a hash ("string" -> ["array", "of", "refined", "values"]) representing the current refinements
  #   ex: { "my_facet1" => ["my_value1", ["my_value2"], "my_disjunctive_facet1" => ["my_value1", "my_value2"] }
  # @param request_options contains extra parameters to send with your query
  # @raise [ArgumentError]
  #
  # source://algoliasearch//lib/algolia/index.rb#842
  def search_disjunctive_faceting(query, disjunctive_facets, params = T.unsafe(nil), refinements = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Search for facet values
  # deprecated
  #
  # @param facet_name Name of the facet to search. It must have been declared in the
  #   index's`attributesForFaceting` setting with the `searchable()` modifier.
  # @param facet_query Text to search for in the facet's values
  # @param search_parameters An optional query to take extra search parameters into account.
  #   These parameters apply to index objects like in a regular search query.
  #   Only facet values contained in the matched objects will be returned.
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#823
  def search_facet(facet_name, facet_query, search_parameters = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Search for facet values
  #
  # @param facet_name Name of the facet to search. It must have been declared in the
  #   index's`attributesForFaceting` setting with the `searchable()` modifier.
  # @param facet_query Text to search for in the facet's values
  # @param search_parameters An optional query to take extra search parameters into account.
  #   These parameters apply to index objects like in a regular search query.
  #   Only facet values contained in the matched objects will be returned.
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#823
  def search_for_facet_values(facet_name, facet_query, search_parameters = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Search rules
  #
  # @param query the query
  # @param params an optional hash of :anchoring, :context, :page, :hitsPerPage
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#1110
  def search_rules(query, params = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Search synonyms
  #
  # @param query the query
  # @param params an optional hash of :type, :page, :hitsPerPage
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#936
  def search_synonyms(query, params = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Set settings for this index
  #
  # source://algoliasearch//lib/algolia/index.rb#670
  def set_settings(new_settings, options = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Set settings for this index and wait end of indexing
  #
  # source://algoliasearch//lib/algolia/index.rb#677
  def set_settings!(new_settings, options = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Deprecated: Please use `client.update_api_key` instead
  #
  # source://algoliasearch//lib/algolia/index.rb#774
  def update_api_key(key, object, validity = T.unsafe(nil), max_queries_per_IP_per_hour = T.unsafe(nil), max_hits_per_query = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Deprecated: Please use `client.update_api_key` instead
  #
  # source://algoliasearch//lib/algolia/index.rb#774
  def update_user_key(key, object, validity = T.unsafe(nil), max_queries_per_IP_per_hour = T.unsafe(nil), max_hits_per_query = T.unsafe(nil), request_options = T.unsafe(nil)); end

  # Wait the publication of a task on the server.
  # All server task are asynchronous and you can check with this method that the task is published.
  #
  # @param taskID the id of the task returned by server
  # @param time_before_retry the time in milliseconds before retry (default = 100ms)
  # @param request_options contains extra parameters to send with your query
  #
  # source://algoliasearch//lib/algolia/index.rb#355
  def wait_task(taskID, time_before_retry = T.unsafe(nil), request_options = T.unsafe(nil)); end

  private

  # source://algoliasearch//lib/algolia/index.rb#1334
  def build_batch(action, objects, with_object_id = T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://algoliasearch//lib/algolia/index.rb#1312
  def check_array(object); end

  # source://algoliasearch//lib/algolia/index.rb#1316
  def check_object(object, in_array = T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://algoliasearch//lib/algolia/index.rb#1327
  def get_objectID(object, objectID = T.unsafe(nil)); end

  # source://algoliasearch//lib/algolia/index.rb#1346
  def sanitized_delete_by_query_params(params); end

  class << self
    # Alias of Algolia.list_indexes
    #
    # @param request_options contains extra parameters to send with your query
    #
    # source://algoliasearch//lib/algolia/index.rb#925
    def all(request_options = T.unsafe(nil)); end

    # Retrieve the given object position in a set of results.
    #
    # @param objects [Array] the result set to browse
    # @param object_id [String] the object to look for
    # @return [Integer] position of the object, or -1 if it's not in the array
    #
    # source://algoliasearch//lib/algolia/index.rb#332
    def get_object_position(objects, object_id); end
  end
end

# source://algoliasearch//lib/algolia/index.rb#167
class Algolia::Index::IndexBrowser
  # @return [IndexBrowser] a new instance of IndexBrowser
  #
  # source://algoliasearch//lib/algolia/index.rb#168
  def initialize(client, name, params); end

  # source://algoliasearch//lib/algolia/index.rb#175
  def browse(request_options = T.unsafe(nil), &block); end
end

# source://algoliasearch//lib/algolia/insights.rb#3
class Algolia::Insights
  # @return [Insights] a new instance of Insights
  #
  # source://algoliasearch//lib/algolia/insights.rb#6
  def initialize(app_id, api_key, region = T.unsafe(nil), params = T.unsafe(nil)); end

  # source://algoliasearch//lib/algolia/insights.rb#23
  def send_event(event); end

  # source://algoliasearch//lib/algolia/insights.rb#27
  def send_events(events); end

  # source://algoliasearch//lib/algolia/insights.rb#19
  def user(user_token); end

  private

  # source://algoliasearch//lib/algolia/insights.rb#33
  def perform_request(method, path, params = T.unsafe(nil), data = T.unsafe(nil)); end
end

# source://algoliasearch//lib/algolia/insights.rb#4
Algolia::Insights::MIN_RUBY_VERSION = T.let(T.unsafe(nil), String)

# A module which encapsulates the specifics of Algolia's REST API.
#
# source://algoliasearch//lib/algolia/protocol.rb#5
module Algolia::Protocol
  class << self
    # source://algoliasearch//lib/algolia/protocol.rb#206
    def ab_tests_stop_uri(ab_test); end

    # source://algoliasearch//lib/algolia/protocol.rb#200
    def ab_tests_uri(ab_test = T.unsafe(nil)); end

    # source://algoliasearch//lib/algolia/protocol.rb#166
    def batch_rules_uri(index); end

    # source://algoliasearch//lib/algolia/protocol.rb#146
    def batch_synonyms_uri(index); end

    # source://algoliasearch//lib/algolia/protocol.rb#51
    def batch_uri(index = T.unsafe(nil)); end

    # source://algoliasearch//lib/algolia/protocol.rb#77
    def browse_uri(index, params = T.unsafe(nil)); end

    # source://algoliasearch//lib/algolia/protocol.rb#162
    def clear_rules_uri(index); end

    # source://algoliasearch//lib/algolia/protocol.rb#142
    def clear_synonyms_uri(index); end

    # source://algoliasearch//lib/algolia/protocol.rb#96
    def clear_uri(index); end

    # source://algoliasearch//lib/algolia/protocol.rb#182
    def cluster_mapping_uri(user_id = T.unsafe(nil)); end

    # source://algoliasearch//lib/algolia/protocol.rb#192
    def cluster_top_user_uri; end

    # source://algoliasearch//lib/algolia/protocol.rb#178
    def clusters_uri; end

    # source://algoliasearch//lib/algolia/protocol.rb#170
    def delete_by_uri(index); end

    # source://algoliasearch//lib/algolia/protocol.rb#116
    def index_key_uri(index, key); end

    # source://algoliasearch//lib/algolia/protocol.rb#120
    def index_keys_uri(index); end

    # source://algoliasearch//lib/algolia/protocol.rb#55
    def index_operation_uri(index); end

    # Construct a uri referencing a given Algolia index
    #
    # source://algoliasearch//lib/algolia/protocol.rb#47
    def index_uri(index); end

    # Construct a uri to list available indexes
    #
    # source://algoliasearch//lib/algolia/protocol.rb#34
    def indexes_uri; end

    # source://algoliasearch//lib/algolia/protocol.rb#108
    def key_uri(key); end

    # source://algoliasearch//lib/algolia/protocol.rb#104
    def keys_uri; end

    # source://algoliasearch//lib/algolia/protocol.rb#188
    def list_ids_uri(page, hits_per_page); end

    # source://algoliasearch//lib/algolia/protocol.rb#100
    def logs(offset, length, type); end

    # source://algoliasearch//lib/algolia/protocol.rb#38
    def multiple_queries_uri(strategy = T.unsafe(nil)); end

    # source://algoliasearch//lib/algolia/protocol.rb#63
    def object_uri(index, object_id, params = T.unsafe(nil)); end

    # source://algoliasearch//lib/algolia/protocol.rb#42
    def objects_uri; end

    # source://algoliasearch//lib/algolia/protocol.rb#86
    def partial_object_uri(index, object_id, create_if_not_exits = T.unsafe(nil)); end

    # source://algoliasearch//lib/algolia/protocol.rb#174
    def personalization_strategy_uri; end

    # source://algoliasearch//lib/algolia/protocol.rb#112
    def restore_key_uri(key); end

    # source://algoliasearch//lib/algolia/protocol.rb#154
    def rule_uri(index, object_id); end

    # source://algoliasearch//lib/algolia/protocol.rb#150
    def rules_uri(index); end

    # source://algoliasearch//lib/algolia/protocol.rb#82
    def search_facet_uri(index, facet); end

    # source://algoliasearch//lib/algolia/protocol.rb#73
    def search_post_uri(index); end

    # source://algoliasearch//lib/algolia/protocol.rb#158
    def search_rules_uri(index); end

    # source://algoliasearch//lib/algolia/protocol.rb#138
    def search_synonyms_uri(index); end

    # source://algoliasearch//lib/algolia/protocol.rb#68
    def search_uri(index, query, params = T.unsafe(nil)); end

    # source://algoliasearch//lib/algolia/protocol.rb#196
    def search_user_id_uri; end

    # source://algoliasearch//lib/algolia/protocol.rb#91
    def settings_uri(index, params = T.unsafe(nil)); end

    # source://algoliasearch//lib/algolia/protocol.rb#134
    def synonym_uri(index, object_id); end

    # source://algoliasearch//lib/algolia/protocol.rb#130
    def synonyms_uri(index); end

    # source://algoliasearch//lib/algolia/protocol.rb#59
    def task_uri(index, task_id); end

    # source://algoliasearch//lib/algolia/protocol.rb#124
    def to_query(params); end
  end
end

# HTTP ERROR CODES
# ----------------------------------------
#
# source://algoliasearch//lib/algolia/protocol.rb#26
Algolia::Protocol::ERROR_BAD_REQUEST = T.let(T.unsafe(nil), Integer)

# source://algoliasearch//lib/algolia/protocol.rb#27
Algolia::Protocol::ERROR_FORBIDDEN = T.let(T.unsafe(nil), Integer)

# source://algoliasearch//lib/algolia/protocol.rb#28
Algolia::Protocol::ERROR_NOT_FOUND = T.let(T.unsafe(nil), Integer)

# The HTTP header used for passing your API key to the Algolia API.
#
# source://algoliasearch//lib/algolia/protocol.rb#19
Algolia::Protocol::HEADER_API_KEY = T.let(T.unsafe(nil), String)

# The HTTP header used for passing your application ID to the Algolia API.
#
# source://algoliasearch//lib/algolia/protocol.rb#16
Algolia::Protocol::HEADER_APP_ID = T.let(T.unsafe(nil), String)

# source://algoliasearch//lib/algolia/protocol.rb#21
Algolia::Protocol::HEADER_FORWARDED_API_KEY = T.let(T.unsafe(nil), String)

# source://algoliasearch//lib/algolia/protocol.rb#20
Algolia::Protocol::HEADER_FORWARDED_IP = T.let(T.unsafe(nil), String)

# The version of the REST API implemented by this module.
#
# source://algoliasearch//lib/algolia/protocol.rb#10
Algolia::Protocol::VERSION = T.let(T.unsafe(nil), Integer)

# source://algoliasearch//lib/algolia/insights.rb#54
class Algolia::UserInsights
  # @return [UserInsights] a new instance of UserInsights
  #
  # source://algoliasearch//lib/algolia/insights.rb#55
  def initialize(insights, user_token); end

  # source://algoliasearch//lib/algolia/insights.rb#72
  def clicked_filters(event_name, index_name, filters, request_options = T.unsafe(nil)); end

  # source://algoliasearch//lib/algolia/insights.rb#60
  def clicked_object_ids(event_name, index_name, object_ids, request_options = T.unsafe(nil)); end

  # source://algoliasearch//lib/algolia/insights.rb#64
  def clicked_object_ids_after_search(event_name, index_name, object_ids, positions, query_id, request_options = T.unsafe(nil)); end

  # source://algoliasearch//lib/algolia/insights.rb#87
  def converted_filters(event_name, index_name, filters, request_options = T.unsafe(nil)); end

  # source://algoliasearch//lib/algolia/insights.rb#76
  def converted_object_ids(event_name, index_name, object_ids, request_options = T.unsafe(nil)); end

  # source://algoliasearch//lib/algolia/insights.rb#80
  def converted_object_ids_after_search(event_name, index_name, object_ids, query_id, request_options = T.unsafe(nil)); end

  # source://algoliasearch//lib/algolia/insights.rb#95
  def viewed_filters(event_name, index_name, filters, request_options = T.unsafe(nil)); end

  # source://algoliasearch//lib/algolia/insights.rb#91
  def viewed_object_ids(event_name, index_name, object_ids, request_options = T.unsafe(nil)); end

  private

  # source://algoliasearch//lib/algolia/insights.rb#101
  def clicked(event, event_name, index_name, request_options = T.unsafe(nil)); end

  # source://algoliasearch//lib/algolia/insights.rb#109
  def converted(event, event_name, index_name, request_options = T.unsafe(nil)); end

  # source://algoliasearch//lib/algolia/insights.rb#125
  def send_event(event); end

  # source://algoliasearch//lib/algolia/insights.rb#117
  def viewed(event, event_name, index_name, request_options = T.unsafe(nil)); end
end

# source://algoliasearch//lib/algolia/version.rb#2
Algolia::VERSION = T.let(T.unsafe(nil), String)

# An exception class raised when the validUntil parameter is not found
#
# source://algoliasearch//lib/algolia/error.rb#28
class Algolia::ValidUntilNotFoundError < ::Algolia::AlgoliaError; end

# source://algoliasearch//lib/algolia/client.rb#10
Algolia::WAIT_TASK_DEFAULT_TIME_BEFORE_RETRY = T.let(T.unsafe(nil), Integer)

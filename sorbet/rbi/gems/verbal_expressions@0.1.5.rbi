# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `verbal_expressions` gem.
# Please instead update this file by running `bin/tapioca gem verbal_expressions`.

# For documentation and install instructions,
# see the main Ruby repo: https://github.com/ryan-endacott/VerbalExpressions.rb
#
# source://verbal_expressions//lib/verbal_expressions.rb#6
class VerEx < ::Regexp
  # @return [VerEx] a new instance of VerEx
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#8
  def initialize(&block); end

  # Adds alternative expressions
  # TODO: or is a reserved keyword in ruby, think of better name
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#142
  def alternatively(value = T.unsafe(nil)); end

  # Any given character
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#100
  def any(value); end

  # Any given character
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#100
  def any_of(value); end

  # Any character any number of times
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#50
  def anything; end

  # Anything but these characters
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#55
  def anything_but(value); end

  # Capture groups (can optionally name)
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#150
  def begin_capture(name = T.unsafe(nil)); end

  # And a shorthand for html-minded
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#63
  def br; end

  # source://verbal_expressions//lib/verbal_expressions.rb#162
  def capture(name = T.unsafe(nil), &block); end

  # Any single digit
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#85
  def digit; end

  # source://verbal_expressions//lib/verbal_expressions.rb#158
  def end_capture; end

  # source://verbal_expressions//lib/verbal_expressions.rb#39
  def end_of_line(enable = T.unsafe(nil)); end

  # We try to keep the syntax as
  # user-friendly as possible.
  # So we can use the "normal"
  # behaviour to split the "sentences"
  # naturally.
  # TODO: then is reserved in ruby, so use find or think of a better name
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#28
  def find(value); end

  # Any integer (multiple digits)
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#90
  def integer; end

  # Any single alphanumeric
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#75
  def letter; end

  # source://verbal_expressions//lib/verbal_expressions.rb#63
  def line_break; end

  # Maybe is used to add values with ?
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#44
  def maybe(value); end

  # source://verbal_expressions//lib/verbal_expressions.rb#18
  def method_missing(method, *args, &block); end

  # Loops
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#134
  def multiple(value); end

  # At least one of some other thing
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#106
  def one_or_more(&b); end

  # Usage: range( from, to [, from, to ... ] )
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#121
  def range(*args); end

  # start or end of line
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#35
  def start_of_line(enable = T.unsafe(nil)); end

  # source://verbal_expressions//lib/verbal_expressions.rb#70
  def tab; end

  # Any whitespace character
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#95
  def whitespace; end

  # Any word (multiple alphanumerics)
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#80
  def word; end

  # source://verbal_expressions//lib/verbal_expressions.rb#112
  def zero_or_more(&b); end

  private

  # Function to add stuff to the
  # expression. Also compiles the
  # new expression so it's ready to
  # be used.
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#185
  def add(value = T.unsafe(nil)); end

  # Sanitation function for adding
  # anything safely to the expression
  #
  # source://verbal_expressions//lib/verbal_expressions.rb#172
  def sanitize(value); end
end

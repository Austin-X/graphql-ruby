# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sass-embedded` gem.
# Please instead update this file by running `bin/tapioca gem sass-embedded`.

# The Sass module.
#
# This communicates with Embedded Dart Sass using the Embedded Sass protocol.
#
# @example
#   Sass.compile('style.scss')
# @example
#   Sass.compile_string('h1 { font-size: 40px; }')
module Sass
  class << self
    # Compiles the Sass file at +path+ to CSS.
    #
    # @overload compile
    # @param path [String]
    # @param load_paths [Array<String>] Paths in which to look for stylesheets loaded by rules like
    #   {@use}[https://sass-lang.com/documentation/at-rules/use] and {@import}[https://sass-lang.com/documentation/at-rules/import].
    # @param charset [Boolean] By default, if the CSS document contains non-ASCII characters, Sass adds a +@charset+
    #   declaration (in expanded output mode) or a byte-order mark (in compressed mode) to indicate its encoding to
    #   browsers or other consumers. If +charset+ is +false+, these annotations are omitted.
    # @param source_map [Boolean] Whether or not Sass should generate a source map.
    # @param source_map_include_sources [Boolean] Whether Sass should include the sources in the generated source map.
    # @param style [String, Symbol] The OutputStyle of the compiled CSS.
    # @param functions [Hash<String, Proc>] Additional built-in Sass functions that are available in all stylesheets.
    # @param alert_ascii [Boolean] If this is +true+, the compiler will exclusively use ASCII characters in its error
    #   and warning messages. Otherwise, it may use non-ASCII Unicode characters as well.
    # @param alert_color [Boolean] If this is +true+, the compiler will use ANSI color escape codes in its error and
    #   warning messages. If it's +false+, it won't use these. If it's +nil+, the compiler will determine whether or
    #   not to use colors depending on whether the user is using an interactive terminal.
    # @param logger [Object] An object to use to handle warnings and/or debug messages from Sass.
    # @param quiet_deps [Boolean] If this option is set to +true+, Sass won’t print warnings that are caused by
    #   dependencies. A “dependency” is defined as any file that’s loaded through +load_paths+ or +importer+.
    #   Stylesheets that are imported relative to the entrypoint are not considered dependencies.
    # @param verbose [Boolean] By default, Dart Sass will print only five instances of the same deprecation warning per
    #   compilation to avoid deluging users in console noise. If you set verbose to +true+, it will instead print every
    #   deprecation warning it encounters.
    # @param importers [Array<Object>] Custom importers that control how Sass resolves loads from rules like
    #   {@use}[https://sass-lang.com/documentation/at-rules/use] and {@import}[https://sass-lang.com/documentation/at-rules/import].
    # @raise [CompileError]
    # @return [CompileResult]
    # @see Embedded#compile
    #
    # source://sass-embedded//lib/sass/embedded.rb#42
    def compile(*_arg0, **_arg1, &_arg2); end

    # Compiles a stylesheet whose contents is +source+ to CSS.
    #
    # @overload compile_string
    # @param source [String]
    # @param importer [Object] The importer to use to handle loads that are relative to the entrypoint stylesheet.
    # @param load_paths [Array<String>] Paths in which to look for stylesheets loaded by rules like
    #   {@use}[https://sass-lang.com/documentation/at-rules/use] and {@import}[https://sass-lang.com/documentation/at-rules/import].
    # @param syntax [String, Symbol] The Syntax to use to parse the entrypoint stylesheet.
    # @param url [String] The canonical URL of the entrypoint stylesheet. If this is passed along with +importer+, it's
    #   used to resolve relative loads in the entrypoint stylesheet.
    # @param charset [Boolean] By default, if the CSS document contains non-ASCII characters, Sass adds a +@charset+
    #   declaration (in expanded output mode) or a byte-order mark (in compressed mode) to indicate its encoding to
    #   browsers or other consumers. If +charset+ is +false+, these annotations are omitted.
    # @param source_map [Boolean] Whether or not Sass should generate a source map.
    # @param source_map_include_sources [Boolean] Whether Sass should include the sources in the generated source map.
    # @param style [String, Symbol] The OutputStyle of the compiled CSS.
    # @param importers [Array<Object>] Custom importers that control how Sass resolves loads from rules like
    #   {@use}[https://sass-lang.com/documentation/at-rules/use] and {@import}[https://sass-lang.com/documentation/at-rules/import].
    # @param alert_ascii [Boolean] If this is +true+, the compiler will exclusively use ASCII characters in its error
    #   and warning messages. Otherwise, it may use non-ASCII Unicode characters as well.
    # @param alert_color [Boolean] If this is +true+, the compiler will use ANSI color escape codes in its error and
    #   warning messages. If it's +false+, it won't use these. If it's +nil+, the compiler will determine whether or
    #   not to use colors depending on whether the user is using an interactive terminal.
    # @param logger [Object] An object to use to handle warnings and/or debug messages from Sass.
    # @param quiet_deps [Boolean] If this option is set to +true+, Sass won’t print warnings that are caused by
    #   dependencies. A “dependency” is defined as any file that’s loaded through +load_paths+ or +importer+.
    #   Stylesheets that are imported relative to the entrypoint are not considered dependencies.
    # @param verbose [Boolean] By default, Dart Sass will print only five instances of the same deprecation warning per
    #   compilation to avoid deluging users in console noise. If you set verbose to +true+, it will instead print every
    #   deprecation warning it encounters.
    # @param functions [Hash<String, Proc>] Additional built-in Sass functions that are available in all stylesheets.
    # @raise [CompileError]
    # @return [CompileResult]
    # @see Embedded#compile_string
    #
    # source://sass-embedded//lib/sass/embedded.rb#52
    def compile_string(*_arg0, **_arg1, &_arg2); end

    # @return [String] Information about the Sass implementation.
    # @see Embedded#info
    #
    # source://sass-embedded//lib/sass/embedded.rb#60
    def info; end

    private

    # source://sass-embedded//lib/sass/embedded.rb#66
    def instance; end
  end
end

# An exception thrown because a Sass compilation failed.
#
# source://sass-embedded//lib/sass/compile_error.rb#5
class Sass::CompileError < ::StandardError
  # @return [CompileError] a new instance of CompileError
  #
  # source://sass-embedded//lib/sass/compile_error.rb#12
  def initialize(message, full_message, sass_stack, span); end

  # @return [String]
  #
  # source://sass-embedded//lib/sass/compile_error.rb#20
  def full_message(*_arg0, **_arg1, &_arg2); end

  # @return [String, nil]
  #
  # source://sass-embedded//lib/sass/compile_error.rb#7
  def sass_stack; end

  # @return [String, nil]
  #
  # source://sass-embedded//lib/sass/compile_error.rb#7
  def sass_stack=(_arg0); end

  # @return [Logger::SourceSpan, nil]
  #
  # source://sass-embedded//lib/sass/compile_error.rb#10
  def span; end

  # @return [Logger::SourceSpan, nil]
  #
  # source://sass-embedded//lib/sass/compile_error.rb#10
  def span=(_arg0); end
end

# The result of compiling Sass to CSS. Returned by {Sass.compile} and {Sass.compile_string}.
#
# @see https://sass-lang.com/documentation/js-api/interfaces/CompileResult
#
# source://sass-embedded//lib/sass/compile_result.rb#7
class Sass::CompileResult
  # @return [CompileResult] a new instance of CompileResult
  #
  # source://sass-embedded//lib/sass/compile_result.rb#17
  def initialize(css, source_map, loaded_urls); end

  # @return [String]
  #
  # source://sass-embedded//lib/sass/compile_result.rb#9
  def css; end

  # @return [Array<String>]
  #
  # source://sass-embedded//lib/sass/compile_result.rb#15
  def loaded_urls; end

  # @return [String, nil]
  #
  # source://sass-embedded//lib/sass/compile_result.rb#12
  def source_map; end
end

# The {Embedded} host for using dart-sass-embedded. Each instance creates
# its own communication {Channel} with a dedicated compiler process.
#
# @example
#   embedded = Sass::Embedded.new
#   result = embedded.compile_string('h1 { font-size: 40px; }')
#   result = embedded.compile('style.scss')
#   embedded.close
class Sass::Embedded
  # @return [Embedded] a new instance of Embedded
  #
  # source://sass-embedded//lib/sass/embedded.rb#92
  def initialize; end

  # source://sass-embedded//lib/sass/embedded.rb#243
  def close; end

  # @return [Boolean]
  #
  # source://sass-embedded//lib/sass/embedded.rb#247
  def closed?; end

  # Compiles the Sass file at +path+ to CSS.
  #
  # @param path [String]
  # @param load_paths [Array<String>] Paths in which to look for stylesheets loaded by rules like
  #   {@use}[https://sass-lang.com/documentation/at-rules/use] and {@import}[https://sass-lang.com/documentation/at-rules/import].
  # @param charset [Boolean] By default, if the CSS document contains non-ASCII characters, Sass adds a +@charset+
  #   declaration (in expanded output mode) or a byte-order mark (in compressed mode) to indicate its encoding to
  #   browsers or other consumers. If +charset+ is +false+, these annotations are omitted.
  # @param source_map [Boolean] Whether or not Sass should generate a source map.
  # @param source_map_include_sources [Boolean] Whether Sass should include the sources in the generated source map.
  # @param style [String, Symbol] The OutputStyle of the compiled CSS.
  # @param functions [Hash<String, Proc>] Additional built-in Sass functions that are available in all stylesheets.
  # @param importers [Array<Object>] Custom importers that control how Sass resolves loads from rules like
  #   {@use}[https://sass-lang.com/documentation/at-rules/use] and {@import}[https://sass-lang.com/documentation/at-rules/import].
  # @param alert_ascii [Boolean] If this is +true+, the compiler will exclusively use ASCII characters in its error
  #   and warning messages. Otherwise, it may use non-ASCII Unicode characters as well.
  # @param alert_color [Boolean] If this is +true+, the compiler will use ANSI color escape codes in its error and
  #   warning messages. If it's +false+, it won't use these. If it's +nil+, the compiler will determine whether or
  #   not to use colors depending on whether the user is using an interactive terminal.
  # @param logger [Object] An object to use to handle warnings and/or debug messages from Sass.
  # @param quiet_deps [Boolean] If this option is set to +true+, Sass won’t print warnings that are caused by
  #   dependencies. A “dependency” is defined as any file that’s loaded through +load_paths+ or +importer+.
  #   Stylesheets that are imported relative to the entrypoint are not considered dependencies.
  # @param verbose [Boolean] By default, Dart Sass will print only five instances of the same deprecation warning per
  #   compilation to avoid deluging users in console noise. If you set verbose to +true+, it will instead print every
  #   deprecation warning it encounters.
  # @raise [CompileError]
  # @return [CompileResult]
  # @see https://sass-lang.com/documentation/js-api/modules#compile
  #
  # source://sass-embedded//lib/sass/embedded.rb#124
  def compile(path, load_paths: T.unsafe(nil), charset: T.unsafe(nil), source_map: T.unsafe(nil), source_map_include_sources: T.unsafe(nil), style: T.unsafe(nil), functions: T.unsafe(nil), importers: T.unsafe(nil), alert_ascii: T.unsafe(nil), alert_color: T.unsafe(nil), logger: T.unsafe(nil), quiet_deps: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # Compiles a stylesheet whose contents is +source+ to CSS.
  #
  # @param source [String]
  # @param importer [Object] The importer to use to handle loads that are relative to the entrypoint stylesheet.
  # @param load_paths [Array<String>] Paths in which to look for stylesheets loaded by rules like
  #   {@use}[https://sass-lang.com/documentation/at-rules/use] and {@import}[https://sass-lang.com/documentation/at-rules/import].
  # @param syntax [String, Symbol] The Syntax to use to parse the entrypoint stylesheet.
  # @param url [String] The canonical URL of the entrypoint stylesheet. If this is passed along with +importer+, it's
  #   used to resolve relative loads in the entrypoint stylesheet.
  # @param charset [Boolean] By default, if the CSS document contains non-ASCII characters, Sass adds a +@charset+
  #   declaration (in expanded output mode) or a byte-order mark (in compressed mode) to indicate its encoding to
  #   browsers or other consumers. If +charset+ is +false+, these annotations are omitted.
  # @param source_map [Boolean] Whether or not Sass should generate a source map.
  # @param source_map_include_sources [Boolean] Whether Sass should include the sources in the generated source map.
  # @param style [String, Symbol] The OutputStyle of the compiled CSS.
  # @param functions [Hash<String, Proc>] Additional built-in Sass functions that are available in all stylesheets.
  # @param importers [Array<Object>] Custom importers that control how Sass resolves loads from rules like
  #   {@use}[https://sass-lang.com/documentation/at-rules/use] and {@import}[https://sass-lang.com/documentation/at-rules/import].
  # @param alert_ascii [Boolean] If this is +true+, the compiler will exclusively use ASCII characters in its error
  #   and warning messages. Otherwise, it may use non-ASCII Unicode characters as well.
  # @param alert_color [Boolean] If this is +true+, the compiler will use ANSI color escape codes in its error and
  #   warning messages. If it's +false+, it won't use these. If it's +nil+, the compiler will determine whether or
  #   not to use colors depending on whether the user is using an interactive terminal.
  # @param logger [Object] An object to use to handle warnings and/or debug messages from Sass.
  # @param quiet_deps [Boolean] If this option is set to +true+, Sass won’t print warnings that are caused by
  #   dependencies. A “dependency” is defined as any file that’s loaded through +load_paths+ or +importer+.
  #   Stylesheets that are imported relative to the entrypoint are not considered dependencies.
  # @param verbose [Boolean] By default, Dart Sass will print only five instances of the same deprecation warning per
  #   compilation to avoid deluging users in console noise. If you set verbose to +true+, it will instead print every
  #   deprecation warning it encounters.
  # @raise [CompileError]
  # @return [CompileResult]
  # @see https://sass-lang.com/documentation/js-api/modules#compileString
  #
  # source://sass-embedded//lib/sass/embedded.rb#195
  def compile_string(source, importer: T.unsafe(nil), load_paths: T.unsafe(nil), syntax: T.unsafe(nil), url: T.unsafe(nil), charset: T.unsafe(nil), source_map: T.unsafe(nil), source_map_include_sources: T.unsafe(nil), style: T.unsafe(nil), functions: T.unsafe(nil), importers: T.unsafe(nil), alert_ascii: T.unsafe(nil), alert_color: T.unsafe(nil), logger: T.unsafe(nil), quiet_deps: T.unsafe(nil), verbose: T.unsafe(nil)); end

  # @return [String] Information about the Sass implementation.
  # @see https://sass-lang.com/documentation/js-api/modules#info
  #
  # source://sass-embedded//lib/sass/embedded.rb#239
  def info; end
end

# The {Async} class.
#
# It awaits until the promise is resolved or rejected.
#
# source://sass-embedded//lib/sass/embedded/async.rb#8
class Sass::Embedded::Async
  # @return [Async] a new instance of Async
  #
  # source://sass-embedded//lib/sass/embedded/async.rb#17
  def initialize; end

  # source://sass-embedded//lib/sass/embedded/async.rb#45
  def await; end

  # source://sass-embedded//lib/sass/embedded/async.rb#35
  def reject(reason); end

  # source://sass-embedded//lib/sass/embedded/async.rb#25
  def resolve(value); end
end

# source://sass-embedded//lib/sass/embedded/async.rb#9
module Sass::Embedded::Async::State; end

# source://sass-embedded//lib/sass/embedded/async.rb#11
Sass::Embedded::Async::State::FULFILLED = T.let(T.unsafe(nil), Integer)

# source://sass-embedded//lib/sass/embedded/async.rb#10
Sass::Embedded::Async::State::PENDING = T.let(T.unsafe(nil), Integer)

# source://sass-embedded//lib/sass/embedded/async.rb#12
Sass::Embedded::Async::State::REJECTED = T.let(T.unsafe(nil), Integer)

# The {Channel} class.
#
# It establishes connection between {Host} and {Dispatcher}.
#
# source://sass-embedded//lib/sass/embedded/channel.rb#8
class Sass::Embedded::Channel
  # @return [Channel] a new instance of Channel
  #
  # source://sass-embedded//lib/sass/embedded/channel.rb#9
  def initialize; end

  # source://sass-embedded//lib/sass/embedded/channel.rb#14
  def close; end

  # @return [Boolean]
  #
  # source://sass-embedded//lib/sass/embedded/channel.rb#20
  def closed?; end

  # source://sass-embedded//lib/sass/embedded/channel.rb#26
  def connect(observer); end
end

# The {Connection} between {Host} to {Dispatcher}.
#
# source://sass-embedded//lib/sass/embedded/channel.rb#39
class Sass::Embedded::Channel::Connection
  # @return [Connection] a new instance of Connection
  #
  # source://sass-embedded//lib/sass/embedded/channel.rb#42
  def initialize(dispatcher, id); end

  # source://sass-embedded//lib/sass/embedded/channel.rb#47
  def disconnect; end

  # Returns the value of attribute id.
  #
  # source://sass-embedded//lib/sass/embedded/channel.rb#40
  def id; end

  # source://sass-embedded//lib/sass/embedded/channel.rb#51
  def send_message(*_arg0, **_arg1, &_arg2); end
end

# The {Compiler} class.
#
# It runs the `dart-sass-embedded` process.
class Sass::Embedded::Compiler
  # @return [Compiler] a new instance of Compiler
  #
  # source://sass-embedded//lib/sass/embedded/compiler.rb#11
  def initialize; end

  # source://sass-embedded//lib/sass/embedded/compiler.rb#27
  def close; end

  # @return [Boolean]
  #
  # source://sass-embedded//lib/sass/embedded/compiler.rb#37
  def closed?; end

  # source://sass-embedded//lib/sass/embedded/compiler.rb#50
  def read; end

  # source://sass-embedded//lib/sass/embedded/compiler.rb#43
  def write(payload); end
end

Sass::Embedded::Compiler::COMMAND = T.let(T.unsafe(nil), Array)

# The {Dispatcher} class.
#
# It dispatches messages between mutliple instances of {Host} and a single {Compiler}.
#
# source://sass-embedded//lib/sass/embedded/dispatcher.rb#8
class Sass::Embedded::Dispatcher
  # @return [Dispatcher] a new instance of Dispatcher
  #
  # source://sass-embedded//lib/sass/embedded/dispatcher.rb#11
  def initialize; end

  # source://sass-embedded//lib/sass/embedded/dispatcher.rb#57
  def close; end

  # @return [Boolean]
  #
  # source://sass-embedded//lib/sass/embedded/dispatcher.rb#61
  def closed?; end

  # source://sass-embedded//lib/sass/embedded/dispatcher.rb#65
  def send_message(*_arg0, **_arg1, &_arg2); end

  # source://sass-embedded//lib/sass/embedded/dispatcher.rb#32
  def subscribe(observer); end

  # source://sass-embedded//lib/sass/embedded/dispatcher.rb#43
  def unsubscribe(id); end

  private

  # source://sass-embedded//lib/sass/embedded/dispatcher.rb#72
  def receive_message; end
end

# source://sass-embedded//lib/sass/embedded/dispatcher.rb#9
Sass::Embedded::Dispatcher::PROTOCOL_ERROR_ID = T.let(T.unsafe(nil), Integer)

# The {Host} class.
#
# It communicates with {Dispatcher} and handles the host logic.
#
# source://sass-embedded//lib/sass/embedded/host/function_registry.rb#5
class Sass::Embedded::Host
  # @return [Host] a new instance of Host
  #
  # source://sass-embedded//lib/sass/embedded/host.rb#14
  def initialize(channel); end

  # source://sass-embedded//lib/sass/embedded/host.rb#91
  def canonicalize_request(message); end

  # source://sass-embedded//lib/sass/embedded/host.rb#18
  def compile_request(path:, source:, importer:, load_paths:, syntax:, url:, charset:, source_map:, source_map_include_sources:, style:, functions:, importers:, alert_ascii:, alert_color:, logger:, quiet_deps:, verbose:); end

  # source://sass-embedded//lib/sass/embedded/host.rb#83
  def compile_response(message); end

  # source://sass-embedded//lib/sass/embedded/host.rb#107
  def error(message); end

  # source://sass-embedded//lib/sass/embedded/host.rb#99
  def file_import_request(message); end

  # source://sass-embedded//lib/sass/embedded/host.rb#103
  def function_call_request(message); end

  # source://sass-embedded//lib/sass/embedded/host.rb#95
  def import_request(message); end

  # source://sass-embedded//lib/sass/embedded/host.rb#79
  def log_event(message); end

  # source://sass-embedded//lib/sass/embedded/host.rb#69
  def version_request; end

  # source://sass-embedded//lib/sass/embedded/host.rb#87
  def version_response(message); end

  private

  # source://sass-embedded//lib/sass/embedded/host.rb#113
  def await; end

  # source://sass-embedded//lib/sass/embedded/host.rb#130
  def id; end

  # source://sass-embedded//lib/sass/embedded/host.rb#126
  def reject(reason); end

  # source://sass-embedded//lib/sass/embedded/host.rb#122
  def resolve(value); end

  # source://sass-embedded//lib/sass/embedded/host.rb#134
  def send_message(*_arg0, **_arg1, &_arg2); end
end

# The {FunctionRegistry} class.
#
# It stores sass custom functions and handles function calls.
#
# source://sass-embedded//lib/sass/embedded/host/function_registry.rb#9
class Sass::Embedded::Host::FunctionRegistry
  # @return [FunctionRegistry] a new instance of FunctionRegistry
  #
  # source://sass-embedded//lib/sass/embedded/host/function_registry.rb#12
  def initialize(functions, alert_color:); end

  # source://sass-embedded//lib/sass/embedded/host/function_registry.rb#44
  def function_call(function_call_request); end

  # Returns the value of attribute global_functions.
  #
  # source://sass-embedded//lib/sass/embedded/host/function_registry.rb#10
  def global_functions; end

  # source://sass-embedded//lib/sass/embedded/host/function_registry.rb#32
  def register(function); end

  private

  # source://sass-embedded//lib/sass/embedded/host/function_registry.rb#72
  def get(function_call_request); end

  # source://sass-embedded//lib/sass/embedded/host/function_registry.rb#81
  def value_protofier; end
end

# The {ImporterRegistry} class.
#
# It stores importers and handles import requests.
#
# source://sass-embedded//lib/sass/embedded/host/importer_registry.rb#9
class Sass::Embedded::Host::ImporterRegistry
  # @return [ImporterRegistry] a new instance of ImporterRegistry
  #
  # source://sass-embedded//lib/sass/embedded/host/importer_registry.rb#12
  def initialize(importers, load_paths, alert_color:); end

  # source://sass-embedded//lib/sass/embedded/host/importer_registry.rb#51
  def canonicalize(canonicalize_request); end

  # source://sass-embedded//lib/sass/embedded/host/importer_registry.rb#85
  def file_import(file_import_request); end

  # source://sass-embedded//lib/sass/embedded/host/importer_registry.rb#66
  def import(import_request); end

  # Returns the value of attribute importers.
  #
  # source://sass-embedded//lib/sass/embedded/host/importer_registry.rb#10
  def importers; end

  # @raise [ArgumentError]
  #
  # source://sass-embedded//lib/sass/embedded/host/importer_registry.rb#28
  def register(importer); end
end

# The {LoggerRegistry} class.
#
# It stores logger and handles log events.
#
# source://sass-embedded//lib/sass/embedded/host/logger_registry.rb#9
class Sass::Embedded::Host::LoggerRegistry
  # @return [LoggerRegistry] a new instance of LoggerRegistry
  #
  # source://sass-embedded//lib/sass/embedded/host/logger_registry.rb#12
  def initialize(logger); end

  # source://sass-embedded//lib/sass/embedded/host/logger_registry.rb#16
  def log(event); end

  # Returns the value of attribute logger.
  #
  # source://sass-embedded//lib/sass/embedded/host/logger_registry.rb#10
  def logger; end
end

# The {ValueProtofier} class.
#
# It converts Pure Ruby types and Protobuf Ruby types.
#
# source://sass-embedded//lib/sass/embedded/host/value_protofier.rb#9
class Sass::Embedded::Host::ValueProtofier
  # @return [ValueProtofier] a new instance of ValueProtofier
  #
  # source://sass-embedded//lib/sass/embedded/host/value_protofier.rb#10
  def initialize(function_registry); end

  # source://sass-embedded//lib/sass/embedded/host/value_protofier.rb#116
  def from_proto(proto); end

  # source://sass-embedded//lib/sass/embedded/host/value_protofier.rb#14
  def to_proto(obj); end
end

# The {ListSeparator} Protofier.
#
# source://sass-embedded//lib/sass/embedded/host/value_protofier.rb#201
module Sass::Embedded::Host::ValueProtofier::ListSeparator
  private

  # source://sass-embedded//lib/sass/embedded/host/value_protofier.rb#219
  def from_proto(separator); end

  # source://sass-embedded//lib/sass/embedded/host/value_protofier.rb#204
  def to_proto(separator); end

  class << self
    # source://sass-embedded//lib/sass/embedded/host/value_protofier.rb#219
    def from_proto(separator); end

    # source://sass-embedded//lib/sass/embedded/host/value_protofier.rb#204
    def to_proto(separator); end
  end
end

# The {Protofier} module.
#
# It converts Pure Ruby types and Protobuf Ruby types.
#
# source://sass-embedded//lib/sass/embedded/protofier.rb#8
module Sass::Embedded::Protofier
  private

  # source://sass-embedded//lib/sass/embedded/protofier.rb#11
  def from_proto_compile_response(compile_response); end

  # source://sass-embedded//lib/sass/embedded/protofier.rb#43
  def from_proto_source_location(source_location); end

  # source://sass-embedded//lib/sass/embedded/protofier.rb#33
  def from_proto_source_span(source_span); end

  # source://sass-embedded//lib/sass/embedded/protofier.rb#64
  def to_proto_output_style(style); end

  # source://sass-embedded//lib/sass/embedded/protofier.rb#51
  def to_proto_syntax(syntax); end

  class << self
    # source://sass-embedded//lib/sass/embedded/protofier.rb#11
    def from_proto_compile_response(compile_response); end

    # source://sass-embedded//lib/sass/embedded/protofier.rb#43
    def from_proto_source_location(source_location); end

    # source://sass-embedded//lib/sass/embedded/protofier.rb#33
    def from_proto_source_span(source_span); end

    # source://sass-embedded//lib/sass/embedded/protofier.rb#64
    def to_proto_output_style(style); end

    # source://sass-embedded//lib/sass/embedded/protofier.rb#51
    def to_proto_syntax(syntax); end
  end
end

# The {Structifier} module.
#
# It converts {::Hash} to {Struct}-like objects.
#
# source://sass-embedded//lib/sass/embedded/structifier.rb#8
module Sass::Embedded::Structifier
  private

  # source://sass-embedded//lib/sass/embedded/structifier.rb#11
  def to_struct(obj, *symbols); end

  class << self
    # source://sass-embedded//lib/sass/embedded/structifier.rb#11
    def to_struct(obj, *symbols); end
  end
end

# source://sass-embedded//lib/sass/embedded/version.rb#5
Sass::Embedded::VERSION = T.let(T.unsafe(nil), String)

# The {Varint} module.
#
# It reads and writes varints.
#
# source://sass-embedded//lib/sass/embedded/varint.rb#8
module Sass::Embedded::Varint
  private

  # source://sass-embedded//lib/sass/embedded/varint.rb#11
  def read(readable); end

  # source://sass-embedded//lib/sass/embedded/varint.rb#22
  def write(writeable, value); end

  class << self
    # source://sass-embedded//lib/sass/embedded/varint.rb#11
    def read(readable); end

    # source://sass-embedded//lib/sass/embedded/varint.rb#22
    def write(writeable, value); end
  end
end

module Sass::EmbeddedProtocol; end

module Sass::EmbeddedProtocol::CalculationOperator
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

Sass::EmbeddedProtocol::CalculationOperator::DIVIDE = T.let(T.unsafe(nil), Integer)
Sass::EmbeddedProtocol::CalculationOperator::MINUS = T.let(T.unsafe(nil), Integer)
Sass::EmbeddedProtocol::CalculationOperator::PLUS = T.let(T.unsafe(nil), Integer)
Sass::EmbeddedProtocol::CalculationOperator::TIMES = T.let(T.unsafe(nil), Integer)
class Sass::EmbeddedProtocol::InboundMessage < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::InboundMessage::CanonicalizeResponse < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::InboundMessage::CompileRequest < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::InboundMessage::CompileRequest::Importer < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::InboundMessage::CompileRequest::StringInput < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::InboundMessage::FileImportResponse < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::InboundMessage::FunctionCallResponse < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::InboundMessage::ImportResponse < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::InboundMessage::ImportResponse::ImportSuccess < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::InboundMessage::VersionRequest < ::Google::Protobuf::AbstractMessage; end

module Sass::EmbeddedProtocol::ListSeparator
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

Sass::EmbeddedProtocol::ListSeparator::COMMA = T.let(T.unsafe(nil), Integer)
Sass::EmbeddedProtocol::ListSeparator::SLASH = T.let(T.unsafe(nil), Integer)
Sass::EmbeddedProtocol::ListSeparator::SPACE = T.let(T.unsafe(nil), Integer)
Sass::EmbeddedProtocol::ListSeparator::UNDECIDED = T.let(T.unsafe(nil), Integer)

module Sass::EmbeddedProtocol::LogEventType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

Sass::EmbeddedProtocol::LogEventType::DEBUG = T.let(T.unsafe(nil), Integer)
Sass::EmbeddedProtocol::LogEventType::DEPRECATION_WARNING = T.let(T.unsafe(nil), Integer)
Sass::EmbeddedProtocol::LogEventType::WARNING = T.let(T.unsafe(nil), Integer)
class Sass::EmbeddedProtocol::OutboundMessage < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::OutboundMessage::CanonicalizeRequest < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::OutboundMessage::CompileResponse < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::OutboundMessage::CompileResponse::CompileFailure < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::OutboundMessage::CompileResponse::CompileSuccess < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::OutboundMessage::FileImportRequest < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::OutboundMessage::FunctionCallRequest < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::OutboundMessage::ImportRequest < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::OutboundMessage::LogEvent < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::OutboundMessage::VersionResponse < ::Google::Protobuf::AbstractMessage; end

module Sass::EmbeddedProtocol::OutputStyle
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

Sass::EmbeddedProtocol::OutputStyle::COMPRESSED = T.let(T.unsafe(nil), Integer)
Sass::EmbeddedProtocol::OutputStyle::EXPANDED = T.let(T.unsafe(nil), Integer)
class Sass::EmbeddedProtocol::ProtocolError < ::Google::Protobuf::AbstractMessage; end

module Sass::EmbeddedProtocol::ProtocolErrorType
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

Sass::EmbeddedProtocol::ProtocolErrorType::INTERNAL = T.let(T.unsafe(nil), Integer)
Sass::EmbeddedProtocol::ProtocolErrorType::PARAMS = T.let(T.unsafe(nil), Integer)
Sass::EmbeddedProtocol::ProtocolErrorType::PARSE = T.let(T.unsafe(nil), Integer)

module Sass::EmbeddedProtocol::SingletonValue
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

Sass::EmbeddedProtocol::SingletonValue::FALSE = T.let(T.unsafe(nil), Integer)
Sass::EmbeddedProtocol::SingletonValue::NULL = T.let(T.unsafe(nil), Integer)
Sass::EmbeddedProtocol::SingletonValue::TRUE = T.let(T.unsafe(nil), Integer)
class Sass::EmbeddedProtocol::SourceSpan < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::SourceSpan::SourceLocation < ::Google::Protobuf::AbstractMessage; end

module Sass::EmbeddedProtocol::Syntax
  class << self
    def descriptor; end
    def lookup(_arg0); end
    def resolve(_arg0); end
  end
end

Sass::EmbeddedProtocol::Syntax::CSS = T.let(T.unsafe(nil), Integer)
Sass::EmbeddedProtocol::Syntax::INDENTED = T.let(T.unsafe(nil), Integer)
Sass::EmbeddedProtocol::Syntax::SCSS = T.let(T.unsafe(nil), Integer)
class Sass::EmbeddedProtocol::Value < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::Value::ArgumentList < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::Value::Calculation < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::Value::Calculation::CalculationOperation < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::Value::Calculation::CalculationValue < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::Value::CompilerFunction < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::Value::HostFunction < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::Value::HslColor < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::Value::HwbColor < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::Value::List < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::Value::Map < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::Value::Map::Entry < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::Value::Number < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::Value::RgbColor < ::Google::Protobuf::AbstractMessage; end
class Sass::EmbeddedProtocol::Value::String < ::Google::Protobuf::AbstractMessage; end

# A namespace for built-in Loggers.
#
# @see https://sass-lang.com/documentation/js-api/modules/Logger
#
# source://sass-embedded//lib/sass/logger/silent.rb#7
module Sass::Logger
  private

  # A Logger that silently ignores all warnings and debug messages.
  #
  # source://sass-embedded//lib/sass/logger/silent.rb#11
  def silent; end

  class << self
    # A Logger that silently ignores all warnings and debug messages.
    #
    # source://sass-embedded//lib/sass/logger/silent.rb#11
    def silent; end
  end
end

# A Logger that silently ignores all warnings and debug messages.
#
# source://sass-embedded//lib/sass/logger/silent.rb#16
module Sass::Logger::Silent
  private

  # source://sass-embedded//lib/sass/logger/silent.rb#21
  def debug(message, span: T.unsafe(nil)); end

  # source://sass-embedded//lib/sass/logger/silent.rb#19
  def warn(message, deprecation: T.unsafe(nil), span: T.unsafe(nil), stack: T.unsafe(nil)); end

  class << self
    # source://sass-embedded//lib/sass/logger/silent.rb#21
    def debug(message, span: T.unsafe(nil)); end

    # source://sass-embedded//lib/sass/logger/silent.rb#19
    def warn(message, deprecation: T.unsafe(nil), span: T.unsafe(nil), stack: T.unsafe(nil)); end
  end
end

# A specific location within a source file.
#
# This is always associated with a {SourceSpan} which indicates which file it refers to.
#
# @see https://sass-lang.com/documentation/js-api/interfaces/SourceLocation
#
# source://sass-embedded//lib/sass/logger/source_location.rb#10
class Sass::Logger::SourceLocation
  # @return [SourceLocation] a new instance of SourceLocation
  #
  # source://sass-embedded//lib/sass/logger/source_location.rb#14
  def initialize(offset, line, column); end

  # @return [Integer]
  #
  # source://sass-embedded//lib/sass/logger/source_location.rb#12
  def column; end

  # @return [Integer]
  #
  # source://sass-embedded//lib/sass/logger/source_location.rb#12
  def line; end

  # @return [Integer]
  #
  # source://sass-embedded//lib/sass/logger/source_location.rb#12
  def offset; end
end

# A span of text within a source file.
#
# @see https://sass-lang.com/documentation/js-api/interfaces/SourceSpan
#
# source://sass-embedded//lib/sass/logger/source_span.rb#8
class Sass::Logger::SourceSpan
  # @return [SourceSpan] a new instance of SourceSpan
  #
  # source://sass-embedded//lib/sass/logger/source_span.rb#18
  def initialize(start, end_, text, url, context); end

  # @return [String, nil]
  #
  # source://sass-embedded//lib/sass/logger/source_span.rb#16
  def context; end

  # @return [SourceLocation]
  #
  # source://sass-embedded//lib/sass/logger/source_span.rb#10
  def end; end

  # @return [SourceLocation]
  #
  # source://sass-embedded//lib/sass/logger/source_span.rb#10
  def start; end

  # @return [String]
  #
  # source://sass-embedded//lib/sass/logger/source_span.rb#13
  def text; end

  # @return [String, nil]
  #
  # source://sass-embedded//lib/sass/logger/source_span.rb#16
  def url; end
end

# An exception thrown by Sass Script.
#
# source://sass-embedded//lib/sass/script_error.rb#5
class Sass::ScriptError < ::StandardError
  # @return [ScriptError] a new instance of ScriptError
  #
  # source://sass-embedded//lib/sass/script_error.rb#6
  def initialize(message, name = T.unsafe(nil)); end
end

# The abstract base class of Sass's value types.
#
# @see https://sass-lang.com/documentation/js-api/classes/Value
#
# source://sass-embedded//lib/sass/value.rb#9
module Sass::Value
  # @param index [Numeric]
  # @return [Value]
  #
  # source://sass-embedded//lib/sass/value.rb#27
  def [](index); end

  # @raise [ScriptError]
  # @return [Boolean]
  #
  # source://sass-embedded//lib/sass/value.rb#59
  def assert_boolean(name = T.unsafe(nil)); end

  # @raise [ScriptError]
  #
  # source://sass-embedded//lib/sass/value.rb#64
  def assert_calculation(name = T.unsafe(nil)); end

  # @raise [ScriptError]
  # @return [Color]
  #
  # source://sass-embedded//lib/sass/value.rb#70
  def assert_color(name = T.unsafe(nil)); end

  # @raise [ScriptError]
  # @return [Function]
  #
  # source://sass-embedded//lib/sass/value.rb#76
  def assert_function(name = T.unsafe(nil)); end

  # @raise [ScriptError]
  # @return [Map]
  #
  # source://sass-embedded//lib/sass/value.rb#82
  def assert_map(name = T.unsafe(nil)); end

  # @raise [ScriptError]
  # @return [Number]
  #
  # source://sass-embedded//lib/sass/value.rb#88
  def assert_number(name = T.unsafe(nil)); end

  # @raise [ScriptError]
  # @return [String]
  #
  # source://sass-embedded//lib/sass/value.rb#94
  def assert_string(name = T.unsafe(nil)); end

  # @param index [Numeric]
  # @return [Value]
  #
  # source://sass-embedded//lib/sass/value.rb#33
  def at(index); end

  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value.rb#16
  def bracketed?; end

  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value.rb#21
  def eql?(other); end

  # @param sass_index [Number]
  # @raise [Sass::ScriptError]
  # @return [Integer]
  #
  # source://sass-embedded//lib/sass/value.rb#100
  def sass_index_to_array_index(sass_index, name = T.unsafe(nil)); end

  # @return [::String, nil]
  #
  # source://sass-embedded//lib/sass/value.rb#11
  def separator; end

  # @return [Array<Value>]
  #
  # source://sass-embedded//lib/sass/value.rb#38
  def to_a; end

  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value.rb#43
  def to_bool; end

  # @return [Map, nil]
  #
  # source://sass-embedded//lib/sass/value.rb#48
  def to_map; end

  # @return [Value, nil]
  #
  # source://sass-embedded//lib/sass/value.rb#53
  def to_nil; end

  private

  # source://sass-embedded//lib/sass/value.rb#113
  def to_a_length; end
end

# Sass's argument list type.
#
# An argument list comes from a rest argument. It's distinct from a normal {List} in that it may contain a keyword
# map as well as the positional arguments.
#
# @see https://sass-lang.com/documentation/js-api/classes/SassArgumentList
#
# source://sass-embedded//lib/sass/value/argument_list.rb#11
class Sass::Value::ArgumentList < ::Sass::Value::List
  # @param contents [Array<Value>]
  # @param keywords [Hash<::String, Value>]
  # @param separator [::String]
  # @return [ArgumentList] a new instance of ArgumentList
  #
  # source://sass-embedded//lib/sass/value/argument_list.rb#15
  def initialize(contents = T.unsafe(nil), keywords = T.unsafe(nil), separator = T.unsafe(nil)); end

  # @return [Hash<::String, Value>]
  #
  # source://sass-embedded//lib/sass/value/argument_list.rb#24
  def keywords; end

  private

  # source://sass-embedded//lib/sass/value/argument_list.rb#31
  def initialize_copy(orig); end
end

# Sass's boolean type.
#
# @see https://sass-lang.com/documentation/js-api/classes/SassBoolean
#
# source://sass-embedded//lib/sass/value/boolean.rb#8
class Sass::Value::Boolean
  include ::Sass::Value

  # @param value [::Boolean]
  # @return [Boolean] a new instance of Boolean
  #
  # source://sass-embedded//lib/sass/value/boolean.rb#12
  def initialize(value); end

  # @return [Boolean]
  #
  # source://sass-embedded//lib/sass/value/boolean.rb#20
  def !; end

  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value/boolean.rb#25
  def ==(other); end

  # @return [Boolean]
  #
  # source://sass-embedded//lib/sass/value/boolean.rb#37
  def assert_boolean(_name = T.unsafe(nil)); end

  # @return [Integer]
  #
  # source://sass-embedded//lib/sass/value/boolean.rb#30
  def hash; end

  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value/boolean.rb#17
  def to_bool; end

  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value/boolean.rb#17
  def value; end

  class << self
    # source://sass-embedded//lib/sass/value/boolean.rb#47
    def new(value); end
  end
end

# Sass's false value.
#
# source://sass-embedded//lib/sass/value/boolean.rb#45
Sass::Value::Boolean::FALSE = T.let(T.unsafe(nil), Sass::Value::Boolean)

# Sass's true value.
#
# source://sass-embedded//lib/sass/value/boolean.rb#42
Sass::Value::Boolean::TRUE = T.let(T.unsafe(nil), Sass::Value::Boolean)

# Sass's color type.
#
# No matter what representation was originally used to create this color, all of its channels are accessible.
#
# @see https://sass-lang.com/documentation/js-api/classes/SassColor
#
# source://sass-embedded//lib/sass/value/color.rb#10
class Sass::Value::Color
  include ::Sass::Value

  # @param red [Numeric]
  # @param green [Numeric]
  # @param blue [Numeric]
  # @param hue [Numeric]
  # @param saturation [Numeric]
  # @param lightness [Numeric]
  # @param whiteness [Numeric]
  # @param blackness [Numeric]
  # @param alpha [Numeric]
  # @return [Color] a new instance of Color
  #
  # source://sass-embedded//lib/sass/value/color.rb#22
  def initialize(red: T.unsafe(nil), green: T.unsafe(nil), blue: T.unsafe(nil), hue: T.unsafe(nil), saturation: T.unsafe(nil), lightness: T.unsafe(nil), whiteness: T.unsafe(nil), blackness: T.unsafe(nil), alpha: T.unsafe(nil)); end

  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value/color.rb#149
  def ==(other); end

  # @return [Numeric]
  #
  # source://sass-embedded//lib/sass/value/color.rb#104
  def alpha; end

  # @return [Color]
  #
  # source://sass-embedded//lib/sass/value/color.rb#163
  def assert_color(_name = T.unsafe(nil)); end

  # @return [Numeric]
  #
  # source://sass-embedded//lib/sass/value/color.rb#99
  def blackness; end

  # @return [Integer]
  #
  # source://sass-embedded//lib/sass/value/color.rb#66
  def blue; end

  # @param red [Numeric]
  # @param green [Numeric]
  # @param blue [Numeric]
  # @param hue [Numeric]
  # @param saturation [Numeric]
  # @param lightness [Numeric]
  # @param whiteness [Numeric]
  # @param blackness [Numeric]
  # @param alpha [Numeric]
  # @return [Color]
  #
  # source://sass-embedded//lib/sass/value/color.rb#116
  def change(red: T.unsafe(nil), green: T.unsafe(nil), blue: T.unsafe(nil), hue: T.unsafe(nil), saturation: T.unsafe(nil), lightness: T.unsafe(nil), whiteness: T.unsafe(nil), blackness: T.unsafe(nil), alpha: T.unsafe(nil)); end

  # @return [Integer]
  #
  # source://sass-embedded//lib/sass/value/color.rb#59
  def green; end

  # @return [Integer]
  #
  # source://sass-embedded//lib/sass/value/color.rb#158
  def hash; end

  # @return [Numeric]
  #
  # source://sass-embedded//lib/sass/value/color.rb#73
  def hue; end

  # @return [Numeric]
  #
  # source://sass-embedded//lib/sass/value/color.rb#87
  def lightness; end

  # @return [Integer]
  #
  # source://sass-embedded//lib/sass/value/color.rb#52
  def red; end

  # @return [Numeric]
  #
  # source://sass-embedded//lib/sass/value/color.rb#80
  def saturation; end

  # @return [Numeric]
  #
  # source://sass-embedded//lib/sass/value/color.rb#94
  def whiteness; end

  private

  # source://sass-embedded//lib/sass/value/color.rb#215
  def hsl_hue_to_rgb(tmp1, tmp2, hue); end

  # source://sass-embedded//lib/sass/value/color.rb#199
  def hsl_to_rgb; end

  # source://sass-embedded//lib/sass/value/color.rb#247
  def hwb_hue_to_rgb(factor, scaled_whiteness, scaled_hue); end

  # source://sass-embedded//lib/sass/value/color.rb#230
  def hwb_to_rgb; end

  # source://sass-embedded//lib/sass/value/color.rb#169
  def rgb_to_hsl; end
end

# Sass's function type.
#
# @see https://sass-lang.com/documentation/js-api/classes/SassFunction
#
# source://sass-embedded//lib/sass/value/function.rb#8
class Sass::Value::Function
  include ::Sass::Value

  # @overload initialize
  # @overload initialize
  # @return [Function] a new instance of Function
  #
  # source://sass-embedded//lib/sass/value/function.rb#16
  def initialize(id_or_signature, callback = T.unsafe(nil)); end

  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value/function.rb#35
  def ==(other); end

  # @return [Function]
  #
  # source://sass-embedded//lib/sass/value/function.rb#49
  def assert_function(_name = T.unsafe(nil)); end

  # @return [Proc, nil]
  #
  # source://sass-embedded//lib/sass/value/function.rb#32
  def callback; end

  # @return [Integer]
  #
  # source://sass-embedded//lib/sass/value/function.rb#44
  def hash; end

  # @return [Integer, nil]
  #
  # source://sass-embedded//lib/sass/value/function.rb#26
  def id; end

  # @return [::String, nil]
  #
  # source://sass-embedded//lib/sass/value/function.rb#29
  def signature; end
end

# Sass's {FuzzyMath} module.
#
# source://sass-embedded//lib/sass/value/fuzzy_math.rb#6
module Sass::Value::FuzzyMath
  private

  # source://sass-embedded//lib/sass/value/fuzzy_math.rb#62
  def assert_between(number, min, max, name); end

  # source://sass-embedded//lib/sass/value/fuzzy_math.rb#54
  def between(number, min, max); end

  # source://sass-embedded//lib/sass/value/fuzzy_math.rb#15
  def equals(number1, number2); end

  # source://sass-embedded//lib/sass/value/fuzzy_math.rb#27
  def greater_than(number1, number2); end

  # source://sass-embedded//lib/sass/value/fuzzy_math.rb#31
  def greater_than_or_equals(number1, number2); end

  # source://sass-embedded//lib/sass/value/fuzzy_math.rb#69
  def hash(number); end

  # source://sass-embedded//lib/sass/value/fuzzy_math.rb#35
  def integer?(number); end

  # source://sass-embedded//lib/sass/value/fuzzy_math.rb#19
  def less_than(number1, number2); end

  # source://sass-embedded//lib/sass/value/fuzzy_math.rb#23
  def less_than_or_equals(number1, number2); end

  # source://sass-embedded//lib/sass/value/fuzzy_math.rb#46
  def round(number); end

  # source://sass-embedded//lib/sass/value/fuzzy_math.rb#42
  def to_i(number); end

  class << self
    # @raise [Sass::ScriptError]
    #
    # source://sass-embedded//lib/sass/value/fuzzy_math.rb#62
    def assert_between(number, min, max, name); end

    # source://sass-embedded//lib/sass/value/fuzzy_math.rb#54
    def between(number, min, max); end

    # source://sass-embedded//lib/sass/value/fuzzy_math.rb#15
    def equals(number1, number2); end

    # source://sass-embedded//lib/sass/value/fuzzy_math.rb#27
    def greater_than(number1, number2); end

    # source://sass-embedded//lib/sass/value/fuzzy_math.rb#31
    def greater_than_or_equals(number1, number2); end

    # source://sass-embedded//lib/sass/value/fuzzy_math.rb#69
    def hash(number); end

    # @return [Boolean]
    #
    # source://sass-embedded//lib/sass/value/fuzzy_math.rb#35
    def integer?(number); end

    # source://sass-embedded//lib/sass/value/fuzzy_math.rb#19
    def less_than(number1, number2); end

    # source://sass-embedded//lib/sass/value/fuzzy_math.rb#23
    def less_than_or_equals(number1, number2); end

    # source://sass-embedded//lib/sass/value/fuzzy_math.rb#46
    def round(number); end

    # source://sass-embedded//lib/sass/value/fuzzy_math.rb#42
    def to_i(number); end
  end
end

# source://sass-embedded//lib/sass/value/fuzzy_math.rb#9
Sass::Value::FuzzyMath::EPSILON = T.let(T.unsafe(nil), Rational)

# source://sass-embedded//lib/sass/value/fuzzy_math.rb#11
Sass::Value::FuzzyMath::INVERSE_EPSILON = T.let(T.unsafe(nil), Rational)

# source://sass-embedded//lib/sass/value/fuzzy_math.rb#7
Sass::Value::FuzzyMath::PRECISION = T.let(T.unsafe(nil), Integer)

# Sass's list type.
#
# @see https://sass-lang.com/documentation/js-api/classes/SassList
#
# source://sass-embedded//lib/sass/value/list.rb#8
class Sass::Value::List
  include ::Sass::Value

  # @param contents [Array<Value>]
  # @param separator [::String]
  # @param bracketed [::Boolean]
  # @return [List] a new instance of List
  #
  # source://sass-embedded//lib/sass/value/list.rb#14
  def initialize(contents = T.unsafe(nil), separator: T.unsafe(nil), bracketed: T.unsafe(nil)); end

  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value/list.rb#36
  def ==(other); end

  # @raise [ScriptError]
  # @return [Map]
  #
  # source://sass-embedded//lib/sass/value/list.rb#68
  def assert_map(name = T.unsafe(nil)); end

  # @param index [Numeric]
  # @return [Value]
  #
  # source://sass-embedded//lib/sass/value/list.rb#46
  def at(index); end

  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value/list.rb#31
  def bracketed?; end

  # @return [Array<Value>]
  #
  # source://sass-embedded//lib/sass/value/list.rb#25
  def contents; end

  # @return [Integer]
  #
  # source://sass-embedded//lib/sass/value/list.rb#55
  def hash; end

  # @return [::String, nil]
  #
  # source://sass-embedded//lib/sass/value/list.rb#28
  def separator; end

  # @return [Array<Value>]
  #
  # source://sass-embedded//lib/sass/value/list.rb#25
  def to_a; end

  # @return [Map, nil]
  #
  # source://sass-embedded//lib/sass/value/list.rb#62
  def to_map; end

  private

  # source://sass-embedded//lib/sass/value/list.rb#74
  def to_a_length; end
end

# Sass's map type.
#
# @see https://sass-lang.com/documentation/js-api/classes/SassMap
#
# source://sass-embedded//lib/sass/value/map.rb#8
class Sass::Value::Map
  include ::Sass::Value

  # @param contents [Hash<Value, Value>]
  # @return [Map] a new instance of Map
  #
  # source://sass-embedded//lib/sass/value/map.rb#12
  def initialize(contents = T.unsafe(nil)); end

  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value/map.rb#25
  def ==(other); end

  # @return [Map]
  #
  # source://sass-embedded//lib/sass/value/map.rb#60
  def assert_map(_name = T.unsafe(nil)); end

  # @param index [Numeric, Value]
  # @return [List<(Value, Value)>, Value]
  #
  # source://sass-embedded//lib/sass/value/map.rb#32
  def at(index); end

  # @return [Hash<Value, Value>]
  #
  # source://sass-embedded//lib/sass/value/map.rb#17
  def contents; end

  # @return [Integer]
  #
  # source://sass-embedded//lib/sass/value/map.rb#45
  def hash; end

  # @return [::String, nil]
  #
  # source://sass-embedded//lib/sass/value/map.rb#20
  def separator; end

  # @return [Array<List<(Value, Value)>>]
  #
  # source://sass-embedded//lib/sass/value/map.rb#50
  def to_a; end

  # @return [Map]
  #
  # source://sass-embedded//lib/sass/value/map.rb#55
  def to_map; end

  private

  # source://sass-embedded//lib/sass/value/map.rb#66
  def to_a_length; end
end

# Sass's null type.
#
# @see https://sass-lang.com/documentation/js-api/modules#sassNull
#
# source://sass-embedded//lib/sass/value/null.rb#8
class Sass::Value::Null
  include ::Sass::Value

  # @return [Null] a new instance of Null
  #
  # source://sass-embedded//lib/sass/value/null.rb#11
  def initialize; end

  # @return [Boolean]
  #
  # source://sass-embedded//lib/sass/value/null.rb#19
  def !; end

  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value/null.rb#24
  def ==(other); end

  # @return [Integer]
  #
  # source://sass-embedded//lib/sass/value/null.rb#29
  def hash; end

  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value/null.rb#34
  def to_bool; end

  # @return [nil]
  #
  # source://sass-embedded//lib/sass/value/null.rb#16
  def to_nil; end

  # @return [nil]
  #
  # source://sass-embedded//lib/sass/value/null.rb#16
  def value; end

  class << self
    # source://sass-embedded//lib/sass/value/null.rb#43
    def new; end
  end
end

# Sass's null value.
#
# source://sass-embedded//lib/sass/value/null.rb#41
Sass::Value::Null::NULL = T.let(T.unsafe(nil), Sass::Value::Null)

# Sass's number type.
#
# @see https://sass-lang.com/documentation/js-api/classes/SassNumber
#
# source://sass-embedded//lib/sass/value/number/unit.rb#5
class Sass::Value::Number
  include ::Sass::Value

  # @option unit
  # @option unit
  # @param value [Numeric]
  # @param unit [::String, Hash]
  # @return [Number] a new instance of Number
  #
  # source://sass-embedded//lib/sass/value/number.rb#17
  def initialize(value, unit = T.unsafe(nil)); end

  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value/number.rb#76
  def ==(other); end

  # @param min [Numeric]
  # @param max [Numeric]
  # @raise [ScriptError]
  # @return [Numeric]
  #
  # source://sass-embedded//lib/sass/value/number.rb#159
  def assert_between(min, max, name = T.unsafe(nil)); end

  # @raise [ScriptError]
  # @return [Integer]
  #
  # source://sass-embedded//lib/sass/value/number.rb#144
  def assert_integer(name = T.unsafe(nil)); end

  # @return [Number]
  #
  # source://sass-embedded//lib/sass/value/number.rb#252
  def assert_number(_name = T.unsafe(nil)); end

  # @param unit [::String]
  # @raise [ScriptError]
  # @return [Number]
  #
  # source://sass-embedded//lib/sass/value/number.rb#131
  def assert_unit(unit, name = T.unsafe(nil)); end

  # @raise [ScriptError]
  # @return [Number]
  #
  # source://sass-embedded//lib/sass/value/number.rb#111
  def assert_unitless(name = T.unsafe(nil)); end

  # @param new_numerator_units [Array<::String>]
  # @param new_denominator_units [Array<::String>]
  # @return [Number]
  #
  # source://sass-embedded//lib/sass/value/number.rb#210
  def coerce(new_numerator_units, new_denominator_units, name = T.unsafe(nil)); end

  # @param other [Number]
  # @return [Number]
  #
  # source://sass-embedded//lib/sass/value/number.rb#234
  def coerce_to_match(other, name = T.unsafe(nil), other_name = T.unsafe(nil)); end

  # @param new_numerator_units [Array<::String>]
  # @param new_denominator_units [Array<::String>]
  # @return [Numeric]
  #
  # source://sass-embedded//lib/sass/value/number.rb#220
  def coerce_value(new_numerator_units, new_denominator_units, name = T.unsafe(nil)); end

  # @param other [Number]
  # @return [Numeric]
  #
  # source://sass-embedded//lib/sass/value/number.rb#243
  def coerce_value_to_match(other, name = T.unsafe(nil), other_name = T.unsafe(nil)); end

  # @param unit [::String]
  # @return [Numeric]
  #
  # source://sass-embedded//lib/sass/value/number.rb#228
  def coerce_value_to_unit(unit, name = T.unsafe(nil)); end

  # @param unit [::String]
  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value/number.rb#165
  def compatible_with_unit?(unit); end

  # @param new_numerator_units [Array<::String>]
  # @param new_denominator_units [Array<::String>]
  # @return [Number]
  #
  # source://sass-embedded//lib/sass/value/number.rb#172
  def convert(new_numerator_units, new_denominator_units, name = T.unsafe(nil)); end

  # @param other [Number]
  # @return [Number]
  #
  # source://sass-embedded//lib/sass/value/number.rb#190
  def convert_to_match(other, name = T.unsafe(nil), other_name = T.unsafe(nil)); end

  # @param new_numerator_units [Array<::String>]
  # @param new_denominator_units [Array<::String>]
  # @return [Numeric]
  #
  # source://sass-embedded//lib/sass/value/number.rb#182
  def convert_value(new_numerator_units, new_denominator_units, name = T.unsafe(nil)); end

  # @param other [Number]
  # @return [Numeric]
  #
  # source://sass-embedded//lib/sass/value/number.rb#199
  def convert_value_to_match(other, name = T.unsafe(nil), other_name = T.unsafe(nil)); end

  # @return [Array<::String>]
  #
  # source://sass-embedded//lib/sass/value/number.rb#73
  def denominator_units; end

  # @return [Integer]
  #
  # source://sass-embedded//lib/sass/value/number.rb#100
  def hash; end

  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value/number.rb#138
  def integer?; end

  # @return [Array<::String>]
  #
  # source://sass-embedded//lib/sass/value/number.rb#73
  def numerator_units; end

  # @return [Integer]
  #
  # source://sass-embedded//lib/sass/value/number.rb#151
  def to_i; end

  # @param unit [::String]
  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value/number.rb#124
  def unit?(unit); end

  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value/number.rb#105
  def unitless?; end

  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value/number.rb#118
  def units?; end

  # @return [Numeric]
  #
  # source://sass-embedded//lib/sass/value/number.rb#70
  def value; end

  private

  # source://sass-embedded//lib/sass/value/number.rb#262
  def canonical_units_value; end

  # source://sass-embedded//lib/sass/value/number.rb#272
  def coerce_or_convert_value(new_numerator_units, new_denominator_units, coerce_unitless:, name: T.unsafe(nil), other: T.unsafe(nil), other_name: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://sass-embedded//lib/sass/value/number.rb#258
  def single_unit?; end

  # source://sass-embedded//lib/sass/value/number.rb#352
  def unit_string(numerator_units, denominator_units); end
end

# The {Unit} module.
#
# source://sass-embedded//lib/sass/value/number/unit.rb#7
module Sass::Value::Number::Unit
  private

  # source://sass-embedded//lib/sass/value/number/unit.rb#171
  def canonical_multiplier(units); end

  # source://sass-embedded//lib/sass/value/number/unit.rb#177
  def canonical_multiplier_for_unit(unit); end

  # source://sass-embedded//lib/sass/value/number/unit.rb#157
  def canonicalize_units(units); end

  # source://sass-embedded//lib/sass/value/number/unit.rb#151
  def conversion_factor(unit1, unit2); end

  class << self
    # source://sass-embedded//lib/sass/value/number/unit.rb#171
    def canonical_multiplier(units); end

    # source://sass-embedded//lib/sass/value/number/unit.rb#177
    def canonical_multiplier_for_unit(unit); end

    # source://sass-embedded//lib/sass/value/number/unit.rb#157
    def canonicalize_units(units); end

    # source://sass-embedded//lib/sass/value/number/unit.rb#151
    def conversion_factor(unit1, unit2); end
  end
end

# source://sass-embedded//lib/sass/value/number/unit.rb#8
Sass::Value::Number::Unit::CONVERSIONS = T.let(T.unsafe(nil), Hash)

# source://sass-embedded//lib/sass/value/number/unit.rb#144
Sass::Value::Number::Unit::TYPES_BY_UNIT = T.let(T.unsafe(nil), Hash)

# source://sass-embedded//lib/sass/value/number/unit.rb#138
Sass::Value::Number::Unit::UNITS_BY_TYPE = T.let(T.unsafe(nil), Hash)

# Sass's string type.
#
# @see https://sass-lang.com/documentation/js-api/classes/SassString
#
# source://sass-embedded//lib/sass/value/string.rb#8
class Sass::Value::String
  include ::Sass::Value

  # @param text [::String]
  # @param quoted [::Boolean]
  # @return [String] a new instance of String
  #
  # source://sass-embedded//lib/sass/value/string.rb#13
  def initialize(text = T.unsafe(nil), quoted: T.unsafe(nil)); end

  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value/string.rb#27
  def ==(other); end

  # @return [String]
  #
  # source://sass-embedded//lib/sass/value/string.rb#37
  def assert_string(_name = T.unsafe(nil)); end

  # @return [Integer]
  #
  # source://sass-embedded//lib/sass/value/string.rb#32
  def hash; end

  # @return [::Boolean]
  #
  # source://sass-embedded//lib/sass/value/string.rb#22
  def quoted?; end

  # @param sass_index [Number]
  # @raise [Sass::ScriptError]
  # @return [Integer]
  #
  # source://sass-embedded//lib/sass/value/string.rb#43
  def sass_index_to_string_index(sass_index, name = T.unsafe(nil)); end

  # @return [::String]
  #
  # source://sass-embedded//lib/sass/value/string.rb#19
  def text; end
end

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `filesize` gem.
# Please instead update this file by running `bin/tapioca gem filesize`.

# source://filesize//lib/filesize.rb#1
class Filesize
  include ::Comparable

  # @param size [Number] A file size, in bytes.
  # @param type [SI, BINARY] Which type to use for conversions.
  # @return [Filesize] a new instance of Filesize
  #
  # source://filesize//lib/filesize.rb#34
  def initialize(size, type = T.unsafe(nil)); end

  # @return [Filesize]
  #
  # source://filesize//lib/filesize.rb#103
  def *(other); end

  # @return [Filesize]
  #
  # source://filesize//lib/filesize.rb#93
  def +(other); end

  # @return [Filesize]
  #
  # source://filesize//lib/filesize.rb#98
  def -(other); end

  # @return [Filesize]
  #
  # source://filesize//lib/filesize.rb#108
  def /(other); end

  # source://filesize//lib/filesize.rb#117
  def <=>(other); end

  # @api private
  # @return [Array<self, other>]
  #
  # source://filesize//lib/filesize.rb#123
  def coerce(other); end

  # Same as {#to_s} but with an automatic determination of the most
  # sensible unit.
  #
  # @return [String]
  # @see #to_s
  #
  # source://filesize//lib/filesize.rb#78
  def pretty(args = T.unsafe(nil)); end

  # @param unit [String] Which unit to convert to.
  # @return [Float] Returns the size in a given unit.
  #
  # source://filesize//lib/filesize.rb#47
  def to(unit = T.unsafe(nil)); end

  # @param unit [String] Which unit to convert to.
  # @return [Float] Returns the size in a given unit.
  #
  # source://filesize//lib/filesize.rb#47
  def to_f(unit = T.unsafe(nil)); end

  # @return [Number] Returns the size in bytes.
  #
  # source://filesize//lib/filesize.rb#40
  def to_i; end

  # @return [Number] Returns the size in bytes.
  #
  # source://filesize//lib/filesize.rb#40
  def to_int; end

  # @param unit [String] Which unit to convert to.
  # @return [String] Same as {#to_f}, but as a string, with the unit appended.
  # @see #to_f
  #
  # source://filesize//lib/filesize.rb#67
  def to_s(unit = T.unsafe(nil), args = T.unsafe(nil)); end

  class << self
    # Parses a string, which describes a file size, and returns a
    # Filesize object.
    #
    # @param arg [String] A file size to parse.
    # @raise [ArgumentError] Raised if the file size cannot be parsed properly.
    # @return [Filesize]
    #
    # source://filesize//lib/filesize.rb#134
    def from(arg); end

    # @api private
    # @return [Hash<:prefix, :size, :type>]
    #
    # source://filesize//lib/filesize.rb#149
    def parse(string); end
  end
end

# Set of rules describing file sizes according to binary units.
#
# source://filesize//lib/filesize.rb#22
Filesize::BINARY = T.let(T.unsafe(nil), Hash)

# The size of a CD
#
# source://filesize//lib/filesize.rb#169
Filesize::CD = T.let(T.unsafe(nil), Filesize)

# The same as a DVD 5
#
# source://filesize//lib/filesize.rb#173
Filesize::DVD = T.let(T.unsafe(nil), Filesize)

# The size of a double-sided single-layer DVD
#
# source://filesize//lib/filesize.rb#177
Filesize::DVD_10 = T.let(T.unsafe(nil), Filesize)

# The size of a double-sided DVD, combining a DVD-9 and a DVD-5
#
# source://filesize//lib/filesize.rb#179
Filesize::DVD_14 = T.let(T.unsafe(nil), Filesize)

# The size of a double-sided dual-layer DVD
#
# source://filesize//lib/filesize.rb#181
Filesize::DVD_18 = T.let(T.unsafe(nil), Filesize)

# The size of a common DVD
#
# source://filesize//lib/filesize.rb#171
Filesize::DVD_5 = T.let(T.unsafe(nil), Filesize)

# The size of a single-sided dual-layer DVD
#
# source://filesize//lib/filesize.rb#175
Filesize::DVD_9 = T.let(T.unsafe(nil), Filesize)

# The size of a floppy disk
#
# source://filesize//lib/filesize.rb#167
Filesize::Floppy = T.let(T.unsafe(nil), Filesize)

# Set default precision
#
# source://filesize//lib/filesize.rb#30
Filesize::PRECISION = T.let(T.unsafe(nil), Integer)

# @deprecated Please use TYPE_PREFIXES[:SI] instead
#
# source://filesize//lib/filesize.rb#12
Filesize::PREFIXES = T.let(T.unsafe(nil), Array)

# Set of rules describing file sizes according to SI units.
#
# source://filesize//lib/filesize.rb#15
Filesize::SI = T.let(T.unsafe(nil), Hash)

# source://filesize//lib/filesize.rb#4
Filesize::TYPE_PREFIXES = T.let(T.unsafe(nil), Hash)

# The size of a Zip disk
#
# source://filesize//lib/filesize.rb#183
Filesize::ZIP = T.let(T.unsafe(nil), Filesize)

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `minitest-focus` gem.
# Please instead update this file by running `bin/tapioca gem minitest-focus`.

# source://minitest-focus//lib/minitest/focus.rb#3
class Minitest::Test < ::Minitest::Runnable
  # source://minitest/5.9.1/lib/minitest/test.rb#203
  def capture_exceptions; end

  # source://minitest/5.9.1/lib/minitest/test.rb#216
  def error?; end

  # source://minitest/5.9.1/lib/minitest/test.rb#223
  def location; end

  # source://minitest/5.9.1/lib/minitest/test.rb#87
  def marshal_dump; end

  # source://minitest/5.9.1/lib/minitest/test.rb#91
  def marshal_load(ary); end

  # source://minitest/5.9.1/lib/minitest/test.rb#234
  def passed?; end

  # source://minitest/5.9.1/lib/minitest/test.rb#241
  def result_code; end

  # source://minitest/5.9.1/lib/minitest/test.rb#101
  def run; end

  # source://minitest/5.9.1/lib/minitest/test.rb#248
  def skipped?; end

  # source://minitest/5.9.1/lib/minitest/test.rb#85
  def time; end

  # source://minitest/5.9.1/lib/minitest/test.rb#85
  def time=(_arg0); end

  # source://minitest/5.9.1/lib/minitest/test.rb#252
  def time_it; end

  # source://minitest/5.9.1/lib/minitest/test.rb#260
  def to_s; end

  # source://minitest/5.9.1/lib/minitest/test.rb#268
  def with_info_handler(&block); end

  class << self
    # source://minitest-focus//lib/minitest/focus.rb#10
    def add_to_filter(name); end

    # source://minitest-focus//lib/minitest/focus.rb#14
    def filtered_names; end

    # Focus on the next test defined. Cumulative. Equivalent to
    # running with command line arg: -n /test_name|.../
    #
    #   class MyTest < Minitest::Test
    #
    #     # direct approach
    #     focus def test_method1 # will run
    #       ...
    #     end
    #
    #     # indirect approach
    #     focus
    #     def test_method2       # will run
    #       ...
    #     end
    #
    #     def test_method3       # will NOT run
    #       ...
    #     end
    #   end
    #
    # source://minitest-focus//lib/minitest/focus.rb#40
    def focus(name = T.unsafe(nil)); end

    # source://minitest/5.9.1/lib/minitest/test.rb#24
    def i_suck_and_my_tests_are_order_dependent!; end

    # source://minitest/5.9.1/lib/minitest/test.rb#16
    def io_lock; end

    # source://minitest/5.9.1/lib/minitest/test.rb#16
    def io_lock=(_arg0); end

    # source://minitest/5.9.1/lib/minitest/test.rb#37
    def make_my_diffs_pretty!; end

    # source://minitest/5.9.1/lib/minitest/test.rb#50
    def parallelize_me!; end

    # source://minitest/5.9.1/lib/minitest/test.rb#60
    def runnable_methods; end

    # Sets a one-off method_added callback to set focus on the method
    # defined next.
    #
    # source://minitest-focus//lib/minitest/focus.rb#52
    def set_focus_trap; end

    # source://minitest/5.9.1/lib/minitest/test.rb#78
    def test_order; end
  end
end

# source://minitest-focus//lib/minitest/focus.rb#4
class Minitest::Test::Focus; end

# source://minitest-focus//lib/minitest/focus.rb#5
Minitest::Test::Focus::VERSION = T.let(T.unsafe(nil), String)
